# üîÑ –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê api.py - –¥–æ–±–∞–≤–ª–µ–Ω—ã endpoints –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π

import os
import uuid
import logging
import base64
from datetime import datetime
from typing import Optional, Any
from contextlib import asynccontextmanager
import time

from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
import uvicorn
from pydantic import BaseModel
import asyncio
import aiohttp
try:
    import builtins
    financial_service = getattr(builtins, 'GLOBAL_FINANCIAL_SERVICE', None)
except:
    financial_service = None

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from database import MishuraDB
from gemini_ai import MishuraGeminiAI
from payment_service import PaymentService

# üåê –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –û–¢–ó–´–í–û–í
from pydantic import BaseModel
from typing import Optional
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d): %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db: Optional[MishuraDB] = None
gemini_ai: Optional[MishuraGeminiAI] = None
payment_service: Optional[PaymentService] = None
financial_service: Optional[Any] = None

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://style-ai-bot.onrender.com')
PORT = int(os.getenv('PORT', 8001))
DEBUG = os.getenv('DEBUG', 'false').lower() == 'true'
TEST_MODE = os.getenv('TEST_MODE', 'false').lower() == 'true'
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ú–ò–®–£–†–ê API:")
logger.info(f"   ENVIRONMENT: {ENVIRONMENT}")
logger.info(f"   DEBUG: {DEBUG}")
logger.info(f"   TEST_MODE: {TEST_MODE}")
logger.info(f"   PORT: {PORT}")
logger.info(f"   WEBAPP_URL: {WEBAPP_URL}")
logger.info(f"   TELEGRAM_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"   GEMINI_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GEMINI_API_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"   YOOKASSA: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê'}")
logger.info(f"   ADMIN_TELEGRAM_ID: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ADMIN_TELEGRAM_ID else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
if ENVIRONMENT == 'production':
    if not TELEGRAM_TOKEN:
        raise ValueError("‚ùå TELEGRAM_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
    if not GEMINI_API_KEY:
        raise ValueError("‚ùå GEMINI_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        raise ValueError("‚ùå –ÆKassa –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")

if TEST_MODE:
    logger.warning("üß™ –¢–ï–°–¢–û–í–´–ô —Ä–µ–∂–∏–º, TEST_MODE: True")
else:
    logger.warning("üè≠ –ü–†–û–î–ê–ö–®–ù —Ä–µ–∂–∏–º, TEST_MODE: False")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PaymentRequest(BaseModel):
    telegram_id: int
    plan_id: str

class PaymentWebhookData(BaseModel):
    event: str
    object: dict

# === –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–ó–´–í–û–í ===

class FeedbackSubmission(BaseModel):
    telegram_id: int
    feedback_text: str
    feedback_rating: str = 'positive'  # positive/negative
    consultation_id: Optional[int] = None

class FeedbackPromptAction(BaseModel):
    telegram_id: int
    consultation_id: int
    action: str  # shown/dismissed/completed
    dismissal_reason: Optional[str] = None

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from admin_notifications import notify_new_feedback, test_admin_notifications
    NOTIFICATIONS_AVAILABLE = True
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    NOTIFICATIONS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    global db, gemini_ai, payment_service, financial_service
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ú–ò–®–£–†–ê API Server...")
    try:
        db = MishuraDB()
        logger.info("‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        db.init_db()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
        # üîê –ù–û–í–û–ï: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        try:
            logger.info("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
            financial_service = getattr(__builtins__, 'GLOBAL_FINANCIAL_SERVICE', None)
            if not financial_service:
                from financial_service import FinancialService
                financial_service = FinancialService(db)
                await _init_balance_locks_for_existing_users(db, financial_service)
                original_update_balance = db.update_user_balance
                db.update_user_balance = financial_service.update_user_balance
                db._original_update_user_balance = original_update_balance
                try:
                    import builtins
                    builtins.GLOBAL_FINANCIAL_SERVICE = financial_service
                except:
                    __builtins__['GLOBAL_FINANCIAL_SERVICE'] = financial_service
                logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ")
            else:
                logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö")
            logger.info("‚úÖ Financial service –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            financial_service = None
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ë–ï–ó —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (fallback —Ä–µ–∂–∏–º)")
        gemini_ai = MishuraGeminiAI()
        logger.info("‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
            payment_service = PaymentService(
                shop_id=YOOKASSA_SHOP_ID,
                secret_key=YOOKASSA_SECRET_KEY,
                db=db,
                test_mode=TEST_MODE
            )
            logger.info("‚úÖ Payment service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è Payment service –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa")
            payment_service = None
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        raise
    yield
    logger.info("üõë –°–µ—Ä–≤–µ—Ä –ú–ò–®–£–†–ê API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# üîê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¥–æ–±–∞–≤–∏—Ç—å –ü–û–°–õ–ï lifespan
async def _init_balance_locks_for_existing_users(db, financial_service):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è balance_locks –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT telegram_id FROM users")
        users = cursor.fetchall()
        
        initialized_count = 0
        
        for user in users:
            telegram_id = user[0]
            try:
                if db.DB_CONFIG['type'] == 'postgresql':
                    cursor.execute("""
                        INSERT INTO balance_locks (telegram_id, version_number, last_updated)
                        VALUES (%s, 1, CURRENT_TIMESTAMP)
                        ON CONFLICT (telegram_id) DO NOTHING
                    """, (telegram_id,))
                else:
                    cursor.execute("""
                        INSERT OR IGNORE INTO balance_locks (telegram_id, version_number)
                        VALUES (?, 1)
                    """, (telegram_id,))
                
                if cursor.rowcount > 0:
                    initialized_count += 1
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å balance_lock –¥–ª—è {telegram_id}: {e}")
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ Balance locks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {initialized_count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(users)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ balance_locks: {e}")
        # –ù–ï –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="üé≠ –ú–ò–®–£–†–ê API", 
    version="2.7.0",
    lifespan=lifespan
)

# üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="webapp"), name="static")

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
PRICING_PLANS = {
    "mini": {
        "name": "üå± –ú–∏–Ω–∏",
        "description": "–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
        "consultations": 1,
        "stcoins": 10,
        "coins": 10,
        "price": 20.0,
        "price_rub": 20,
        "price_kop": 2000,
        "discount": 0,
        "popular": False,
        "temporary": False,
        "color": "üü¢"
    },
    "basic": {
        "name": "üåü –ë–∞–∑–æ–≤—ã–π",
        "description": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞–Ω",
        "consultations": 10,
        "stcoins": 100,
        "coins": 100,
        "price": 150.0,
        "price_rub": 150,
        "price_kop": 15000,
        "discount": 25,
        "popular": False,
        "temporary": False,
        "color": "üîµ"
    },
    "standard": {
        "name": "‚≠ê –°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π (–ü–û–ü–£–õ–Ø–†–ù–´–ô)",
        "consultations": 30,
        "stcoins": 300,
        "coins": 300,
        "price": 300.0,
        "price_rub": 300,
        "price_kop": 30000,
        "discount": 33,
        "popular": True,
        "temporary": False,
        "color": "üü£"
    },
    "premium": {
        "name": "üíé –ü—Ä–µ–º–∏—É–º",
        "description": "–í—ã–≥–æ–¥–Ω—ã–π –ø–ª–∞–Ω",
        "consultations": 100,
        "stcoins": 1000,
        "coins": 1000,
        "price": 800.0,
        "price_rub": 800,
        "price_kop": 80000,
        "discount": 60,
        "popular": False,
        "temporary": False,
        "color": "üü°"
    }
}

# === API ENDPOINTS ===

@app.get("/")
async def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html_path = os.path.join("webapp", "index.html")
    
    if not os.path.exists(html_path):
        return HTMLResponse(content="‚ùå index.html –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=404)
    
    try:
        with open(html_path, "r", encoding="utf-8") as f:
            content = f.read()
        return HTMLResponse(content=content)
    except Exception as e:
        return HTMLResponse(content=f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", status_code=500)

@app.head("/")
async def head_root():
    return Response(status_code=200)

@app.get("/webapp")
async def webapp_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    return RedirectResponse(url="/", status_code=307)

@app.get("/api/v1/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        # –¢–µ—Å—Ç Gemini AI
        gemini_status = await gemini_ai.test_gemini_connection()
        
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "database": "healthy",
                "gemini_ai": "healthy" if gemini_status else "unhealthy",
                "payments": "healthy" if payment_service else "disabled"
            },
            "version": "2.6.1",
            "environment": ENVIRONMENT
        }
        
        if not gemini_status:
            health_data["status"] = "degraded"
            
        return health_data
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "timestamp": datetime.now().isoformat(),
                "error": str(e)
            }
        )

@app.get("/api/v1/users/{telegram_id}/balance")
async def get_user_balance(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        balance = db.get_user_balance(telegram_id)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω financial_service
        additional_info = {}
        if financial_service:
            try:
                recent_transactions = financial_service.get_transaction_history(telegram_id, 5)
                additional_info['recent_transactions_count'] = len(recent_transactions)
                
                if recent_transactions:
                    additional_info['last_transaction'] = {
                        'type': recent_transactions[0]['transaction_type'],
                        'amount': recent_transactions[0]['amount'],
                        'date': recent_transactions[0]['created_at']
                    }
            except Exception as e:
                logger.warning(f"Could not get additional balance info: {e}")
        
        return {
            "telegram_id": telegram_id,
            "balance": balance,
            "timestamp": datetime.now().isoformat(),
            **additional_info
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/users/{telegram_id}/balance/sync")
async def sync_user_balance(telegram_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        balance = db.get_user_balance(telegram_id)
        return {
            "telegram_id": telegram_id,
            "balance": balance,
            "synced_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/pricing/plans")
async def get_pricing_plans():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    return {
        "plans": PRICING_PLANS,
        "timestamp": datetime.now().isoformat()
    }

# === –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò ENDPOINTS ===

@app.post("/api/v1/consultations/analyze")
async def analyze_consultation(request: Request):
    """üîê –ó–ê–©–ò–©–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    correlation_id = str(uuid.uuid4())
    start_time = time.time()
    
    try:
        data = await request.json()
        user_id = data.get('user_id')
        occasion = data.get('occasion', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π')
        preferences = data.get('preferences', '')
        image_data = data.get('image_data')
        
        logger.info(f"üé® [{correlation_id}] –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç user_id: {user_id}")
        
        if not image_data or not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # üîê –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï —á–µ—Ä–µ–∑ financial_service
        if financial_service:
            operation_result = financial_service.safe_balance_operation(
                telegram_id=user_id,
                amount_change=-10,
                operation_type="consultation_analysis",
                correlation_id=correlation_id,
                metadata={
                    "occasion": occasion,
                    "service": "single_analysis",
                    "endpoint": "/consultations/analyze"
                }
            )
            
            if not operation_result['success']:
                error_detail = operation_result.get('error', 'unknown_error')
                
                if error_detail == 'insufficient_balance':
                    raise HTTPException(
                        status_code=400, 
                        detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoins. –¢—Ä–µ–±—É–µ—Ç—Å—è: {operation_result.get('required', 10)} –¥–æ—Å—Ç—É–ø–Ω–æ: {operation_result.get('available', 0)}"
                    )
                else:
                    logger.error(f"[{correlation_id}] Financial operation failed: {operation_result}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            current_balance = db.get_user_balance(user_id)
            if current_balance < 10:
                raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoins –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image_bytes = base64.b64decode(image_data)
        except Exception as e:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=10,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "invalid_image"}
                )
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # ü§ñ –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó GEMINI AI (—Å timeout –∏ retry)
        try:
            analysis = await asyncio.wait_for(
                gemini_ai.analyze_clothing_image(
                    image_data=image_bytes,
                    occasion=occasion,
                    preferences=preferences
                ),
                timeout=60.0  # 60 —Å–µ–∫—É–Ω–¥ timeout
            )
        except asyncio.TimeoutError:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ timeout
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=10,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "gemini_timeout"}
                )
            raise HTTPException(status_code=504, detail="–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        except Exception as e:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ Gemini
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=10,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "gemini_error", "error": str(e)}
                )
            logger.error(f"[{correlation_id}] Gemini analysis failed: {e}")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω (–≤ —Å–ª—É—á–∞–µ fallback)
        if not financial_service:
            new_balance = db.update_user_balance(user_id, -10, "consultation")
        else:
            new_balance = operation_result['new_balance']
        
        # üìù –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ
        try:
            consultation_id = db.save_consultation(
                user_id=user_id,
                occasion=occasion,
                preferences=preferences,
                image_path=None,
                advice=analysis
            )
        except Exception as e:
            logger.warning(f"[{correlation_id}] Failed to save consultation: {e}")
            consultation_id = None
        
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ [{correlation_id}] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: user_id={user_id} time={processing_time:.2f}s, balance={new_balance}")
        
        return {
            "consultation_id": consultation_id,
            "advice": analysis,
            "balance": new_balance,
            "cost": 10,
            "correlation_id": correlation_id,
            "processing_time": round(processing_time, 2),
            "status": "success"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [{correlation_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/api/v1/consultations/compare")
async def compare_consultation(request: Request):
    """üîê –ó–ê–©–ò–©–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    
    correlation_id = str(uuid.uuid4())
    start_time = time.time()
    
    try:
        data = await request.json()
        user_id = data.get('user_id')
        occasion = data.get('occasion', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π')
        preferences = data.get('preferences', '')
        images_data = data.get('images_data', [])
        
        logger.info(f"‚öñÔ∏è [{correlation_id}] –ó–∞–ø—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç user_id: {user_id} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images_data)}")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
        
        if len(images_data) < 2:
            raise HTTPException(status_code=400, detail="–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        if len(images_data) > 4:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # üîê –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï (15 STcoins –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
        if financial_service:
            operation_result = financial_service.safe_balance_operation(
                telegram_id=user_id,
                amount_change=-15,
                operation_type="consultation_compare",
                correlation_id=correlation_id,
                metadata={
                    "occasion": occasion,
                    "service": "comparison",
                    "images_count": len(images_data),
                    "endpoint": "/consultations/compare"
                }
            )
            
            if not operation_result['success']:
                error_detail = operation_result.get('error', 'unknown_error')
                
                if error_detail == 'insufficient_balance':
                    raise HTTPException(
                        status_code=400, 
                        detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoins –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è: {operation_result.get('required', 15)} –¥–æ—Å—Ç—É–ø–Ω–æ: {operation_result.get('available', 0)}"
                    )
                else:
                    logger.error(f"[{correlation_id}] Financial operation failed: {operation_result}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            current_balance = db.get_user_balance(user_id)
            if current_balance < 15:
                raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoins –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        decoded_images = []
        try:
            for i, img_data in enumerate(images_data):
                image_bytes = base64.b64decode(img_data)
                decoded_images.append(image_bytes)
        except Exception as e:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=15,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "invalid_images"}
                )
            raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #{i+1}")
        
        # ü§ñ –°–†–ê–í–ù–ï–ù–ò–ï –ß–ï–†–ï–ó GEMINI AI (—Å timeout)
        try:
            comparison = await asyncio.wait_for(
                gemini_ai.compare_clothing_images(
                    image_data_list=decoded_images,
                    occasion=occasion,
                    preferences=preferences
                ),
                timeout=90.0  # 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            )
        except asyncio.TimeoutError:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ timeout
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=15,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "gemini_timeout"}
                )
            raise HTTPException(status_code=504, detail="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        except Exception as e:
            # üö® –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ Gemini
            if financial_service:
                financial_service.safe_balance_operation(
                    telegram_id=user_id,
                    amount_change=15,
                    operation_type="consultation_refund",
                    correlation_id=correlation_id,
                    metadata={"reason": "gemini_error", "error": str(e)}
                )
            logger.error(f"[{correlation_id}] Gemini comparison failed: {e}")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–≤ —Å–ª—É—á–∞–µ fallback)
        if not financial_service:
            new_balance = db.update_user_balance(user_id, -15, "comparison")
        else:
            new_balance = operation_result['new_balance']
        
        # üìù –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ
        try:
            consultation_id = db.save_consultation(
                user_id=user_id,
                occasion=occasion,
                preferences=preferences,
                image_path=None,
                advice=comparison
            )
        except Exception as e:
            logger.warning(f"[{correlation_id}] Failed to save consultation: {e}")
            consultation_id = None
        
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ [{correlation_id}] –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: user_id={user_id} time={processing_time:.2f}s, balance={new_balance}")
        
        return {
            "consultation_id": consultation_id,
            "advice": comparison,
            "balance": new_balance,
            "cost": 15,
            "correlation_id": correlation_id,
            "processing_time": round(processing_time, 2),
            "status": "success"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [{correlation_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# === –ü–õ–ê–¢–ï–ñ–ò ENDPOINTS ===

@app.post("/api/v1/payments/create")
async def create_payment_endpoint(request: PaymentRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º return_url"""
    
    if not payment_service:
        raise HTTPException(
            status_code=503, 
            detail="–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ÆKassa"
        )
    
    logger.info("üîç –ù–ê–ß–ê–õ–û —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:")
    logger.info(f"   telegram_id: {request.telegram_id}")
    logger.info(f"   plan_id: {request.plan_id}")
    logger.info(f"   WEBAPP_URL: {WEBAPP_URL}")
    logger.info(f"   TEST_MODE: {TEST_MODE}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        if request.plan_id not in PRICING_PLANS:
            raise HTTPException(status_code=400, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {request.plan_id}")
        
        plan = PRICING_PLANS[request.plan_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user_by_telegram_id(request.telegram_id)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = db.save_user(
                telegram_id=request.telegram_id,
                username="webapp_user",
                first_name="WebApp",
                last_name="User"
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user_id={user_id} telegram_id={request.telegram_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0
            db.update_user_balance(request.telegram_id, 0, "initialization")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.get_user_by_telegram_id(request.telegram_id)
        
        if not user:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è telegram_id: {request.telegram_id}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        user_id = user['id']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π return_url –Ω–∞ –æ—Å–Ω–æ–≤–µ WEBAPP_URL
        correct_return_url = f"{WEBAPP_URL}?payment_success=true&section=balance"
        
        logger.info(f"üíé –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {plan}")
        logger.info(f"üîó Return URL: {correct_return_url}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º return_url
        payment_result = payment_service.create_payment(
            payment_id=payment_id,
            amount=plan['price'],
            description=f"–ú–ò–®–£–†–ê - {plan['name']} ({plan['stcoins']} STCoins)",
            return_url=correct_return_url,
            user_id=user_id,
            telegram_id=request.telegram_id,
            plan_id=request.plan_id,
            stcoins_amount=plan['stcoins']
        )
        
        logger.info(f"üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_result}")
        
        if not payment_result or 'payment_url' not in payment_result:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {payment_result}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "payment_id": payment_id,
            "yookassa_payment_id": payment_result.get('yookassa_payment_id'),
            "payment_url": payment_result['payment_url'],
            "return_url": correct_return_url,
            "amount": plan['price'],
            "currency": "RUB",
            "plan": {
                "id": request.plan_id,
                "name": plan['name'],
                "stcoins": plan['stcoins']
            },
            "status": "pending",
            "stcoins_amount": plan['stcoins']
        }
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.telegram_id} –ø–ª–∞–Ω {request.plan_id} ({plan['name']})")
        logger.info(f"üéØ Return URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {correct_return_url}")
        
        return response_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

@app.post("/api/v1/payments/webhook")
async def payment_webhook_endpoint(request: Request):
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa"""
    
    if not payment_service:
        logger.warning("‚ö†Ô∏è Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ payment_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return {"status": "ignored"}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = await request.json()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if webhook_data.get('event') == 'payment.succeeded' and 'object' in webhook_data:
            payment_object = webhook_data['object']
            yookassa_payment_id = payment_object.get('id')
            
            if not yookassa_payment_id:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞ –≤ webhook")
                return {"status": "error", "message": "Missing payment ID"}
            
            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {yookassa_payment_id}")
            
            # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            success = payment_service.process_successful_payment(yookassa_payment_id)
            
            if success:
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return {"status": "success"}
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ {yookassa_payment_id}")
                return {"status": "error", "message": "Payment processing failed"}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        elif webhook_data.get('event') == 'payment.canceled':
            payment_object = webhook_data['object']
            yookassa_payment_id = payment_object.get('id')
            logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {yookassa_payment_id}")
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)
        return {"status": "error", "message": str(e)}

@app.get("/api/v1/payments/{payment_id}/status")
async def get_payment_status(payment_id: str, telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    
    if not payment_service:
        raise HTTPException(status_code=503, detail="–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    try:
        payment_info = payment_service.get_payment_status(payment_id, telegram_id)
        
        if not payment_info:
            raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return payment_info
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/health/financial")
async def financial_health_check():
    """üîê Real-time —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    
    try:
        health = {
            'timestamp': datetime.now().isoformat(),
            'status': 'healthy',
            'financial_service': 'available' if financial_service else 'unavailable',
            'metrics': {},
            'alerts': []
        }
        
        if not financial_service:
            health['status'] = 'degraded'
            health['alerts'].append({
                'level': 'warning',
                'message': 'Financial service not available - using fallback'
            })
        else:
            try:
                stats = financial_service.get_financial_stats()
                health['metrics'] = stats
                
                # –ê–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
                if stats.get('zero_balance_users', 0) > stats.get('total_users', 1) * 0.5:
                    health['alerts'].append({
                        'level': 'warning',
                        'message': f"High number of zero balance users: {stats['zero_balance_users']}"
                    })
                
            except Exception as e:
                health['status'] = 'degraded'
                health['alerts'].append({
                    'level': 'error',
                    'message': f'Error getting financial stats: {str(e)}'
                })
        
        return health
        
    except Exception as e:
        return {
            'timestamp': datetime.now().isoformat(),
            'status': 'unhealthy',
            'error': str(e)
        }

@app.get("/api/v1/users/{telegram_id}/transactions")
async def get_user_transactions(telegram_id: int, limit: int = 20):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    try:
        if not financial_service:
            raise HTTPException(status_code=503, detail="Financial service unavailable")
        
        transactions = financial_service.get_transaction_history(telegram_id, limit)
        
        return {
            "telegram_id": telegram_id,
            "transactions": transactions,
            "count": len(transactions),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error getting transactions for {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/payments/recovery/process")
async def recover_failed_payments():
    """üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"""
    
    if not payment_service:
        raise HTTPException(status_code=503, detail="Payment service unavailable")
    
    try:
        logger.info("üîß –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API database.py
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        if db.DB_CONFIG['type'] == 'postgresql':
            recovery_query = """
                SELECT yookassa_payment_id, telegram_id, stcoins_amount, created_at
                FROM payments 
                WHERE status = 'pending' 
                AND created_at >= NOW() - INTERVAL '24 hours'
                ORDER BY created_at DESC
            """
            cursor.execute(recovery_query)
        else:
            recovery_query = """
                SELECT yookassa_payment_id, telegram_id, stcoins_amount, created_at
                FROM payments 
                WHERE status = 'pending' 
                AND datetime(created_at) >= datetime('now', '-24 hours')
                ORDER BY created_at DESC
            """
            cursor.execute(recovery_query)
        
        pending_payments = cursor.fetchall()
        conn.close()
        
        recovered_count = 0
        recovery_details = []
        
        for payment in pending_payments:
            yookassa_payment_id = payment[0]
            telegram_id = payment[1] 
            stcoins_amount = payment[2]
            created_at = payment[3]
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
                from yookassa import Payment
                yookassa_payment = Payment.find_one(yookassa_payment_id)
                
                if yookassa_payment and yookassa_payment.status == 'succeeded':
                    logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: {yookassa_payment_id} –¥–ª—è user {telegram_id}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
                    success = payment_service.process_successful_payment(yookassa_payment_id)
                    
                    if success:
                        recovered_count += 1
                        recovery_details.append({
                            "yookassa_payment_id": yookassa_payment_id,
                            "telegram_id": telegram_id,
                            "stcoins_amount": stcoins_amount,
                            "status": "recovered",
                            "created_at": str(created_at)
                        })
                        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    else:
                        recovery_details.append({
                            "yookassa_payment_id": yookassa_payment_id,
                            "telegram_id": telegram_id,
                            "stcoins_amount": stcoins_amount,
                            "status": "failed_to_recover",
                            "created_at": str(created_at)
                        })
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {yookassa_payment_id}: {e}")
                recovery_details.append({
                    "yookassa_payment_id": yookassa_payment_id,
                    "telegram_id": telegram_id,
                    "stcoins_amount": stcoins_amount,
                    "status": "error",
                    "error": str(e),
                    "created_at": str(created_at)
                })
        
        logger.info(f"üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {recovered_count} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ {len(pending_payments)}")
        
        return {
            "recovered_count": recovered_count,
            "total_checked": len(pending_payments),
            "recovery_details": recovery_details,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –û–¢–ó–´–í–û–í ===

@app.post("/api/v1/feedback/submit")
async def submit_feedback(request: Request):
    """üèÜ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–∞"""
    
    correlation_id = str(uuid.uuid4())
    start_time = time.time()
    
    try:
        data = await request.json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        telegram_id = data.get('telegram_id')
        feedback_text = data.get('feedback_text', '').strip()
        feedback_rating = data.get('feedback_rating', 'positive')
        consultation_id = data.get('consultation_id')
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∏ User-Agent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ip_address = request.client.host if request.client else None
        user_agent = request.headers.get('user-agent', '')
        
        logger.info(f"üìù [{correlation_id}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç user_id: {telegram_id} rating: {feedback_rating}")
        
        if not telegram_id or not feedback_text:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        if feedback_rating not in ['positive', 'negative']:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 'positive' –∏–ª–∏ 'negative'")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–∞
        if len(feedback_text) < 150:
            raise HTTPException(
                status_code=400, 
                detail=f"–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ: {len(feedback_text)}"
            )
        
        if len(feedback_text) > 1000:
            raise HTTPException(
                status_code=400, 
                detail="–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤"
            )
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)
        if is_spam_text(feedback_text):
            raise HTTPException(status_code=400, detail="–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
        feedback_id = db.save_feedback_submission(
            telegram_id=telegram_id,
            feedback_text=feedback_text,
            feedback_rating=feedback_rating,
            consultation_id=consultation_id,
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        if not feedback_id:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
        
        # üîî –ù–û–í–û–ï: –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£
        try:
            user_data = db.get_user(telegram_id)
            feedback_notification_data = {
                'id': feedback_id,
                'telegram_id': telegram_id,
                'feedback_text': feedback_text,
                'feedback_rating': feedback_rating,
                'character_count': len(feedback_text),
                'consultation_id': consultation_id,
                'bonus_awarded': len(feedback_text) >= 150,
                'created_at': datetime.now().isoformat()
            }
            asyncio.create_task(notify_new_feedback(feedback_notification_data, user_data))
            logger.info(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∑—ã–≤–µ ID={feedback_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        # üéÅ –ù–ê–ß–ò–°–õ–Ø–ï–ú –ë–û–ù–£–° –ó–ê –û–¢–ó–´–í (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ >= 150 —Å–∏–º–≤–æ–ª–æ–≤)
        bonus_awarded = False
        new_balance = None
        
        if len(feedback_text) >= 150:
            if financial_service:
                bonus_result = financial_service.safe_balance_operation(
                    telegram_id=telegram_id,
                    amount_change=10,  # +1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è = 10 STcoins
                    operation_type="feedback_bonus",
                    correlation_id=correlation_id,
                    metadata={
                        "feedback_id": feedback_id,
                        "character_count": len(feedback_text),
                        "feedback_rating": feedback_rating,
                        "service": "feedback_system"
                    }
                )
                
                if bonus_result['success']:
                    bonus_awarded = True
                    new_balance = bonus_result['new_balance']
                    
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω
                    db.mark_feedback_bonus_awarded(feedback_id)
                    
                    logger.info(f"üí∞ [{correlation_id}] –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: user_id={telegram_id} new_balance={new_balance}")
                else:
                    logger.error(f"‚ùå [{correlation_id}] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: {bonus_result}")
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                try:
                    new_balance = db.update_user_balance(telegram_id, 10, "feedback_bonus")
                    bonus_awarded = True
                    db.mark_feedback_bonus_awarded(feedback_id)
                    logger.info(f"üí∞ [{correlation_id}] –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω (fallback): user_id={telegram_id} new_balance={new_balance}")
                except Exception as e:
                    logger.error(f"‚ùå [{correlation_id}] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ (fallback): {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        db.log_feedback_prompt(telegram_id, consultation_id or 0, 'completed')
        
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ [{correlation_id}] –û—Ç–∑—ã–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: feedback_id={feedback_id} rating={feedback_rating} bonus={bonus_awarded} time={processing_time:.2f}s")
        
        return {
            "feedback_id": feedback_id,
            "bonus_awarded": bonus_awarded,
            "balance": new_balance,
            "character_count": len(feedback_text),
            "feedback_rating": feedback_rating,
            "correlation_id": correlation_id,
            "processing_time": round(processing_time, 2),
            "status": "success",
            "message": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é." if bonus_awarded else "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [{correlation_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/api/v1/feedback/can-prompt/{telegram_id}")
async def can_show_feedback_prompt(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞"""
    try:
        can_show = db.can_show_feedback_prompt(telegram_id)
        
        return {
            "telegram_id": telegram_id,
            "can_show_prompt": can_show,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–∞ –¥–ª—è {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/feedback/prompt-action")
async def log_feedback_prompt_action(request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ä–º–æ–π –æ—Ç–∑—ã–≤–∞"""
    try:
        data = await request.json()
        
        telegram_id = data.get('telegram_id')
        consultation_id = data.get('consultation_id', 0)
        action = data.get('action', 'shown')  # shown/dismissed/completed
        dismissal_reason = data.get('dismissal_reason')
        
        if not telegram_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id")
        
        success = db.log_feedback_prompt(
            telegram_id=telegram_id,
            consultation_id=consultation_id,
            action=action,
            dismissal_reason=dismissal_reason
        )
        
        if success:
            return {
                "telegram_id": telegram_id,
                "action": action,
                "logged_at": datetime.now().isoformat(),
                "status": "success"
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–æ—Ä–º–æ–π –æ—Ç–∑—ã–≤–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/feedback/stats")
async def get_feedback_stats():
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        stats = db.get_feedback_stats()
        
        return {
            "stats": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/admin/test-notifications")
async def test_notifications():
    """üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É"""
    if not NOTIFICATIONS_AVAILABLE:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    try:
        success = await test_admin_notifications()
        if success:
            return {
                "status": "success",
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "status": "failed", 
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "timestamp": datetime.now().isoformat()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def is_spam_text(text: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        char_counts = {}
        for char in text:
            char_counts[char] = char_counts.get(char, 0) + 1
        
        total_chars = len(text)
        for char, count in char_counts.items():
            if count / total_chars > 0.3:  # –ï—Å–ª–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç >30%
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
        words = text.lower().split()
        if len(words) < 5:
            return False
            
        word_counts = {}
        for word in words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                word_counts[word] = word_counts.get(word, 0) + 1
        
        total_words = len([w for w in words if len(w) > 2])
        for word, count in word_counts.items():
            if total_words > 0 and count / total_words > 0.4:  # –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ >40%
                return True
        
        return False
        
    except Exception:
        return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º

# üÜï –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –¥–ª—è keep-alive
@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Render –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        db = MishuraDB()
        stats = db.get_stats()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "service": "mishura-ai-stylist",
            "database": "connected",
            "users": stats.get('total_users', 0),
            "uptime": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return {
            "status": "unhealthy", 
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/ping")
async def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è keep-alive"""
    return {"status": "pong", "timestamp": datetime.now().isoformat()}

@app.get("/status")
async def service_status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db = MishuraDB()
        stats = db.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini AI
        gemini_status = "unknown"
        try:
            from gemini_ai import test_gemini_connection
            gemini_test = await test_gemini_connection()
            gemini_status = "connected" if gemini_test else "disconnected"
        except:
            gemini_status = "error"
        
        return {
            "service": "–ú–ò–®–£–†–ê AI Stylist",
            "status": "operational",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "database": "connected",
                "gemini_ai": gemini_status,
                "webapp": "running",
                "api": "running"
            },
            "statistics": stats,
            "environment": os.getenv("RENDER", "local")
        }
        
    except Exception as e:
        logger.error(f"‚ùå Status check failed: {e}")
        return {
            "service": "–ú–ò–®–£–†–ê AI Stylist",
            "status": "degraded",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# üÜï KEEP-ALIVE –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
class RenderKeepAlive:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Render —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.app_url = os.getenv('RENDER_EXTERNAL_URL', 'https://mi-q7ae.onrender.com')
        self.is_running = False
        
    async def ping_self(self):
        """Ping —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(f"{self.app_url}/ping") as response:
                    if response.status == 200:
                        logger.info("üèì Keep-alive ping successful")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è Keep-alive ping failed: {response.status}")
                        return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive ping error: {e}")
            return False
    
    async def start_keepalive(self):
        """–ó–∞–ø—É—Å–∫ keep-alive –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.is_running:
            return
            
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Render Keep-Alive —Å–µ—Ä–≤–∏—Å–∞")
        
        while self.is_running:
            try:
                # –ü–∏–Ω–≥—É–µ–º —Å–µ–±—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                await asyncio.sleep(600)  # 10 minutes
                await self.ping_self()
                
            except Exception as e:
                logger.error(f"‚ùå Keep-alive error: {e}")
                await asyncio.sleep(60)  # Retry in 1 minute
    
    def stop_keepalive(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive"""
        self.is_running = False
        logger.info("üõë Render Keep-Alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä keep-alive
keep_alive = RenderKeepAlive()

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Ç–æ–ª—å–∫–æ –Ω–∞ Render
    if os.getenv('RENDER'):
        asyncio.create_task(keep_alive.start_keepalive())
        logger.info("üèì Render Keep-Alive –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞")
    keep_alive.stop_keepalive()

if __name__ == "__main__":
    logger.info(f"üé≠ –ú–ò–®–£–†–ê API Server starting on port {PORT}")
    
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=PORT,
        reload=DEBUG and ENVIRONMENT != 'production',
        log_level="info" if not DEBUG else "debug"
    )