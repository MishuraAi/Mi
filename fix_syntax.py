#!/usr/bin/env python3
"""
üîß –°–ö–†–ò–ü–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø app.js
–£–¥–∞–ª—è–µ—Ç –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ –∫–ª–∞—Å—Å–∞ MishuraApp
"""

import re
import os

def fix_app_js():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–ª–∞—Å—Å–∞ –≤ app.js"""
    
    file_path = 'webapp/app.js'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.backup"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    fixes_count = 0
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—è—Ç—ã—Ö –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
    # –ò—â–µ–º: },\n    methodName() {
    pattern = r'},(\s*\n\s*)([a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*\{)'
    
    def replace_comma(match):
        nonlocal fixes_count
        fixes_count += 1
        whitespace = match.group(1)
        method_signature = match.group(2)
        return f'}}{whitespace}{method_signature}'
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
    new_content = re.sub(pattern, replace_comma, content)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ async –º–µ—Ç–æ–¥–∞–º–∏
    pattern_async = r'},(\s*\n\s*)(async\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*\{)'
    def replace_comma_async(match):
        nonlocal fixes_count
        fixes_count += 1
        whitespace = match.group(1)
        method_signature = match.group(2)
        return f'}}{whitespace}{method_signature}'
    
    new_content = re.sub(pattern_async, replace_comma_async, new_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –≥–µ—Ç—Ç–µ—Ä–∞–º–∏ –∏ —Å–µ—Ç—Ç–µ—Ä–∞–º–∏
    pattern_getter = r'},(\s*\n\s*)(get\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\(\s*\)\s*\{)'
    new_content = re.sub(pattern_getter, replace_comma_async, new_content)
    
    pattern_setter = r'},(\s*\n\s*)(set\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*\{)'
    new_content = re.sub(pattern_setter, replace_comma_async, new_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    pattern_static = r'},(\s*\n\s*)(static\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\([^)]*\)\s*\{)'
    new_content = re.sub(pattern_static, replace_comma_async, new_content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if fixes_count == 0:
        print("‚úÖ –ó–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ñ–∞–π–ª —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        os.remove(backup_path)  # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        return True
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixes_count} –∑–∞–ø—è—Ç—ã—Ö –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏")
    print(f"üìù –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {backup_path}")
    print("üöÄ –§–∞–π–ª app.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
    
    return True

def fix_database_postgres_balance():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç DEFAULT 200 –Ω–∞ DEFAULT 50 –≤ PostgreSQL —Å—Ö–µ–º–µ"""
    
    file_path = 'database.py'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PostgreSQL —Å—Ö–µ–º—ã –≤ {file_path}...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º DEFAULT 200 –Ω–∞ DEFAULT 50 –≤ PostgreSQL —Å—Ö–µ–º–µ
    old_pattern = r'balance INTEGER DEFAULT 200,'
    new_pattern = 'balance INTEGER DEFAULT 50,'
    
    if old_pattern in content:
        new_content = content.replace(old_pattern, new_pattern)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print("‚úÖ PostgreSQL —Å—Ö–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: DEFAULT 200 ‚Üí DEFAULT 50")
        return True
    else:
        print("‚úÖ PostgreSQL —Å—Ö–µ–º–∞ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé≠ === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í –ú–ò–®–£–†–ê ===\n")
    
    success = True
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º app.js
    if not fix_app_js():
        success = False
    
    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º database.py
    if not fix_database_postgres_balance():
        success = False
    
    print("\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if success:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ø–ª–æ–π:")
        print("git add webapp/app.js database.py")
        print('git commit -m "Fix class syntax and PostgreSQL default balance"')
        print("git push origin main")
    else:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
    
    return success

if __name__ == "__main__":
    main()