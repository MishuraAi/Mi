import os
import uuid
import asyncio
import logging
import json
from datetime import datetime, timezone
from typing import Dict, Any, Optional, List

import requests
from yookassa import Configuration, Payment, Settings
from yookassa.domain.models import Currency
from yookassa.domain.exceptions import ApiError, ResponseProcessingError

from database import MishuraDB

logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self, shop_id: str, secret_key: str, db: MishuraDB, test_mode: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        self.shop_id = shop_id
        self.secret_key = secret_key
        self.db = db
        self.test_mode = test_mode
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Æ–ö–∞—Å—Å—ã
        try:
            Configuration.configure(
                account_id=shop_id,
                secret_key=secret_key
            )
            logger.info(f"‚úÖ –ÆKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: shop_id={shop_id}, test_mode={test_mode}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa: {e}")
            raise

    def create_payment(self, payment_id: str, amount: float, description: str, 
                      return_url: str, user_id: int, telegram_id: int, 
                      plan_id: str, stcoins_amount: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ database.py"""
        
        try:
            # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ database.py (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
            success = self.db.save_payment(
                payment_id=payment_id,
                user_id=user_id,
                telegram_id=telegram_id,
                plan_id=plan_id,
                amount=amount,
                stcoins_amount=stcoins_amount,
                status='pending'
            )
            
            if not success:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ÆKassa —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —á–µ–∫–æ–º
            payment_data = {
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": description,
                "test": self.test_mode,
                "metadata": {
                    "payment_id": payment_id,
                    "telegram_id": str(telegram_id),
                    "plan_id": plan_id,
                    "stcoins": str(stcoins_amount)
                },
                # üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–† RECEIPT –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è 54-–§–ó
                "receipt": {
                    "customer": {
                        "email": f"user{telegram_id}@mishura.style"
                    },
                    "items": [
                        {
                            "description": f"{description} ({stcoins_amount} STCoins)",
                            "quantity": "1.00",
                            "amount": {
                                "value": f"{amount:.2f}",
                                "currency": "RUB"
                            },
                            "vat_code": 1,  # –ë–µ–∑ –ù–î–°
                            "payment_mode": "full_payment",
                            "payment_subject": "service"
                        }
                    ]
                }
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ÆKassa: {json.dumps(payment_data, ensure_ascii=False, indent=2)}")
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                payment = Payment.create(payment_data)
                
            except Exception as e:
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
                error_details = self._extract_error_details(e)
                logger.error(f"‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –Æ–ö–ê–°–°–´: {error_details}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î —á–µ—Ä–µ–∑ database.py
                self.db.update_payment_status(payment_id, 'failed', str(e))
                
                # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                raise Exception(f"–ÆKassa –æ—à–∏–±–∫–∞: {error_details}")
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa: {payment.id}")
            
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å ID –æ—Ç –ÆKassa —á–µ—Ä–µ–∑ database.py
            success = self.db.update_payment_yookassa_id(payment_id, payment.id)
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å YooKassa ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            
            return {
                "status": "success",
                "payment_id": payment_id,
                "yookassa_payment_id": payment.id,
                "payment_url": payment.confirmation.confirmation_url,
                "amount": amount,
                "currency": "RUB"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            try:
                self.db.update_payment_status(payment_id, 'failed', str(e))
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                
            raise

    def process_successful_payment(self, yookassa_payment_id: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ database.py"""
        try:
            # 1. –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î —á–µ—Ä–µ–∑ database.py
            payment_record = self.db.get_payment_by_yookassa_id(yookassa_payment_id)
            
            if not payment_record:
                logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
                return False

            payment_id = payment_record['payment_id']
            telegram_id = payment_record['telegram_id']
            stcoins_amount = payment_record['stcoins_amount']
            current_status = payment_record['status']

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if current_status == "succeeded":
                logger.info(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return True

            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {yookassa_payment_id}, –Ω–∞—á–∏—Å–ª—è–µ–º {stcoins_amount} STCoins")
            
            # 3. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ STCoins —á–µ—Ä–µ–∑ database.py
            new_balance = self.db.update_user_balance(telegram_id, stcoins_amount, "payment")
            
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ database.py
            success = self.db.mark_payment_processed(payment_id)
            
            if success:
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ {yookassa_payment_id} –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {yookassa_payment_id}: {e}")
            return False

    def get_payment_status(self, payment_id: str, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ database.py"""
        try:
            return self.db.get_payment_status(payment_id, telegram_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None

    def get_pending_payments_for_recovery(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            return self.db.get_pending_payments(limit)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []

    def _extract_error_details(self, error: Exception) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"""
        
        try:
            # –î–ª—è HTTP –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            if hasattr(error, 'response'):
                response = error.response
                
                error_info = {
                    "http_status": getattr(response, 'status_code', 'unknown'),
                    "url": getattr(response, 'url', 'unknown'),
                    "headers": dict(getattr(response, 'headers', {})),
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                try:
                    if hasattr(response, 'text'):
                        response_text = response.text
                        error_info["response_body"] = response_text
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        try:
                            response_json = json.loads(response_text)
                            error_info["response_json"] = response_json
                        except:
                            pass
                            
                except Exception as e:
                    error_info["response_extraction_error"] = str(e)
                
                return json.dumps(error_info, indent=2, ensure_ascii=False)
                
            # –î–ª—è API –æ—à–∏–±–æ–∫ –Æ–ö–∞—Å—Å—ã
            elif isinstance(error, (ApiError, ResponseProcessingError)):
                api_error_info = {
                    "error_type": type(error).__name__,
                    "error_message": str(error),
                    "http_code": getattr(error, 'http_code', 'unknown'),
                    "error_code": getattr(error, 'error_code', 'unknown'),
                    "description": getattr(error, 'description', 'unknown'),
                    "parameter": getattr(error, 'parameter', 'unknown'),
                    "retry_after": getattr(error, 'retry_after', 'unknown'),
                }
                
                return json.dumps(api_error_info, indent=2, ensure_ascii=False)
            
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            else:
                return f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {type(error).__name__}: {str(error)}"
                
        except Exception as extraction_error:
            return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {extraction_error}. –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {error}"

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ÆKassa"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            test_payment_data = {
                'amount': {
                    'value': '1.00',
                    'currency': 'RUB'
                },
                'confirmation': {
                    'type': 'redirect',
                    'return_url': 'https://test.com'
                },
                'capture': False,  # –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
                'test': True,
                'receipt': {
                    'customer': {
                        'email': 'test@mishura.style'
                    },
                    'items': [
                        {
                            'description': '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
                            'quantity': '1.00',
                            'amount': {
                                'value': '1.00',
                                'currency': 'RUB'
                            },
                            'vat_code': 1,
                            'payment_mode': 'full_payment',
                            'payment_subject': 'service'
                        }
                    ]
                }
            }
            
            payment = Payment.create(test_payment_data)
            
            # –°—Ä–∞–∑—É –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            Payment.cancel(payment.id)
            
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ÆKassa —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ÆKassa: {e}")
            return False