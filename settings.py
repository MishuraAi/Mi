"""Global project settings and reusable constants."""
from typing import Dict, Optional

# üéØ –ï–¥–∏–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DEFAULT_START_BALANCE: int = 50

# üß™ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ Telegram ID
SPECIAL_START_BALANCES: Dict[int, int] = {
    5930269100: 2000,  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
}


def _normalize_telegram_id(telegram_id: Optional[int]) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ Telegram ID –∫ int –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å None."""
    try:
        if telegram_id is None:
            return None
        return int(telegram_id)
    except (TypeError, ValueError):
        return None


def get_initial_balance(telegram_id: Optional[int]) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    normalized_id = _normalize_telegram_id(telegram_id)
    if normalized_id is None:
        return DEFAULT_START_BALANCE
    return SPECIAL_START_BALANCES.get(normalized_id, DEFAULT_START_BALANCE)


def get_balance_override(telegram_id: Optional[int]) -> Optional[int]:
    """–í–µ—Ä–Ω—É—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è Telegram ID, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω."""
    normalized_id = _normalize_telegram_id(telegram_id)
    if normalized_id is None:
        return None
    return SPECIAL_START_BALANCES.get(normalized_id)
