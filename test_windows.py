#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü™ü WINDOWS-–°–û–í–ú–ï–°–¢–ò–ú–´–ô –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ API.PY
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–∞ Windows
"""

import os
import sys
import ast
import traceback

def test_file_encoding_and_syntax():
    """–¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Windows"""
    
    print("üß™ " + "="*60)
    print("üß™ WINDOWS-–°–û–í–ú–ï–°–¢–ò–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API.PY")
    print("üß™ " + "="*60)
    
    api_file = "api.py"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(api_file):
        print(f"‚ùå –§–∞–π–ª {api_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
        print("üìã –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for f in os.listdir('.'):
            if f.endswith('.py'):
                print(f"   üêç {f}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {api_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(api_file)} –±–∞–π—Ç")
    print()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    encodings_to_try = ['utf-8', 'utf-8-sig', 'cp1251', 'latin1']
    content = None
    used_encoding = None
    
    print("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:")
    print("-" * 40)
    
    for encoding in encodings_to_try:
        try:
            with open(api_file, 'r', encoding=encoding) as f:
                content = f.read()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
            used_encoding = encoding
            break
        except UnicodeDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {encoding}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å {encoding}: {e}")
    
    if content is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π!")
        return False
    
    print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {used_encoding}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python:")
    print("-" * 40)
    
    try:
        # –ü–∞—Ä—Å–∏–º AST
        tree = ast.parse(content)
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        functions = []
        async_functions = []
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                functions.append(node.name)
            elif isinstance(node, ast.AsyncFunctionDef):
                async_functions.append(node.name)
            elif isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom) and node.module:
                imports.append(node.module)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(functions)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ async —Ñ—É–Ω–∫—Ü–∏–π: {len(async_functions)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(set(imports))}")
        
    except SyntaxError as e:
        print(f"‚ùå –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        print(f"   üìç –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text}")
        print(f"   üí¨ –û—à–∏–±–∫–∞: {e.msg}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        if e.lineno:
            lines = content.split('\n')
            start = max(0, e.lineno - 3)
            end = min(len(lines), e.lineno + 2)
            
            print(f"\nüîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Å—Ç—Ä–æ–∫–∏ {start+1}-{end}):")
            for i in range(start, end):
                marker = ">>>" if i + 1 == e.lineno else "   "
                print(f"{marker} {i+1:3d}: {lines[i]}")
        
        return False
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        traceback.print_exc()
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä:")
    print("-" * 40)
    
    # PRICING_PLANS
    if 'PRICING_PLANS = {' in content:
        print("‚úÖ PRICING_PLANS –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå PRICING_PLANS –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    key_functions = ['home', 'health_check', 'get_user_balance']
    missing_functions = []
    
    all_functions = functions + async_functions
    for func in key_functions:
        if func not in all_functions:
            missing_functions.append(func)
    
    if missing_functions:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {missing_functions}")
        return False
    else:
        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É 227 (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    lines = content.split('\n')
    if len(lines) >= 227:
        line_227 = lines[226].strip()  # –ò–Ω–¥–µ–∫—Å 226 = —Å—Ç—Ä–æ–∫–∞ 227
        print(f"\nüéØ –°—Ç—Ä–æ–∫–∞ 227: '{line_227}'")
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if line_227.endswith(','):
            print("‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ 227 –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–æ–π")
        elif '}' in line_227 and not line_227.endswith(','):
            print("‚úÖ –°—Ç—Ä–æ–∫–∞ 227 –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\n" + "="*60)
    print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    print("‚úÖ –§–∞–π–ª api.py –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!")
    print("="*60)
    
    return True

def fix_encoding_if_needed():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    
    api_file = "api.py"
    
    if not os.path.exists(api_file):
        print(f"‚ùå –§–∞–π–ª {api_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    try:
        with open(api_file, 'r', encoding='utf-8') as f:
            content = f.read()
        print("‚úÖ –§–∞–π–ª —É–∂–µ –≤ UTF-8")
        return True
    except UnicodeDecodeError:
        print("üîß –§–∞–π–ª –Ω–µ –≤ UTF-8, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
    
    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    for encoding in ['cp1251', 'latin1', 'utf-8-sig']:
        try:
            with open(api_file, 'r', encoding=encoding) as f:
                content = f.read()
            
            # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8
            backup_file = f"{api_file}.backup"
            os.rename(api_file, backup_file)
            
            with open(api_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∏–∑ {encoding} –≤ UTF-8")
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            return True
            
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("ü™ü –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Windows...")
    print()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
    if not fix_encoding_if_needed():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É")
        return False
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    return test_file_encoding_and_syntax()

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é! –í—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   git add api.py")
        print("   git commit -m \"üîß FIX: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\"")
        print("   git push")
    else:
        print("\nüö® –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    
    input("\nüì± –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(0 if success else 1)