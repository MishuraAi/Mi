/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: API –∫–ª–∏–µ–Ω—Ç (api.js)
–í–ï–†–°–ò–Ø: 1.4.2 - –ò–°–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê userId: null
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-20

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ userId –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id  
‚úÖ –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
‚úÖ –†–µ—à–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ "userId: null"
==========================================================================================
*/

class MishuraAPIService {
    constructor() {
        this.baseURL = null;
        this.timeout = 90000; // 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è Gemini AI
        this.retryAttempts = 3;
        this.isHealthy = false;
        this.lastHealthCheck = null;
        this.systemInfo = this.getSystemInfo();
        this.telegramCompat = this.checkTelegramCompat();
        
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL
        this.detectBaseURL();
        
        console.log('‚úÖ MishuraAPIService —Å–æ–∑–¥–∞–Ω:', this.baseURL);
    }

    getSystemInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            online: navigator.onLine,
            cookieEnabled: navigator.cookieEnabled,
            timestamp: new Date().toISOString()
        };
    }

    checkTelegramCompat() {
        const tg = window.Telegram?.WebApp;
        return {
            isTelegramWebApp: tg?.initData,
            version: tg?.version || null,
            platform: tg?.platform || navigator.platform,
            colorScheme: tg?.colorScheme || 'light',
            isExpanded: tg?.isExpanded || false,
            viewportHeight: tg?.viewportHeight || window.innerHeight
        };
    }

    detectBaseURL() {
        const currentHost = window.location.hostname;
        const currentProtocol = window.location.protocol;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        if (currentHost === 'localhost' || currentHost === '127.0.0.1') {
            // üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –≤–∞—à api.py –Ω–∞ –ø–æ—Ä—Ç—É 8001 (–ù–ï 8000!)
            this.baseURL = `${currentProtocol}//localhost:8001/api/v1`;
            console.log('üè† –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - API –Ω–∞ –ø–æ—Ä—Ç—É 8001');
        } else if (currentHost.includes('onrender.com') || currentHost.includes('render.com')) {
            // Render.com - api.py –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤—Å—ë –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ
            this.baseURL = `${currentProtocol}//${currentHost}/api/v1`;
            console.log('‚òÅÔ∏è Render.com - –µ–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        } else {
            // –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
            this.baseURL = `${currentProtocol}//${currentHost}/api/v1`;
            console.log('üåê Production environment');
        }
        console.log('üîç –ë–∞–∑–æ–≤—ã–π URL API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this.baseURL);
    }

    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        const defaultOptions = {
            timeout: this.timeout,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json',
                ...options.headers
            }
        };

        const requestOptions = { ...defaultOptions, ...options };

        // –î–æ–±–∞–≤–ª—è–µ–º timeout —á–µ—Ä–µ–∑ AbortController
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);

        try {
            const response = await fetch(url, {
                ...requestOptions,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                return await response.text();
            }

        } catch (error) {
            clearTimeout(timeoutId);
            
            if (error.name === 'AbortError') {
                throw new Error(`Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª ${requestOptions.timeout}ms`);
            }
            
            throw error;
        }
    }

    async healthCheck() {
        try {
            console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...');
            const response = await this.makeRequest('/health', {
                method: 'GET',
                timeout: 5000 // –ö–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è health check
            });
            this.isHealthy = response.status === 'healthy';
            this.lastHealthCheck = new Date();
            if (this.isHealthy) {
                console.log('üè• –°—Ç–∞—Ç—É—Å API:', response);
                return response;
            } else {
                console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ OK —Å—Ç–∞—Ç—É—Å:', response.status);
                return null;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            this.isHealthy = false;
            this.lastHealthCheck = new Date();
            return null;
        }
    }

    // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ userId
    getCurrentUserId() {
        try {
            // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.userService) {
                const userId = window.userService.getCurrentUserId();
                console.log('üî• User ID —á–µ—Ä–µ–∑ UserService:', userId);
                return userId;
            }
            
            console.warn('‚ö†Ô∏è UserService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            return this.getFallbackUserId();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user ID:', error);
            return this.getFallbackUserId();
        }
    }

    // –ù–û–í–´–ô fallback –º–µ—Ç–æ–¥ –¥–ª—è api.js
    getFallbackUserId() {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('üî• Fallback: User ID –∏–∑ Telegram WebApp:', telegramId);
                return parseInt(telegramId);
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('user_id')) {
                const userId = parseInt(urlParams.get('user_id'));
                if (!isNaN(userId)) {
                    console.log('üî• Fallback: User ID –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', userId);
                    return userId;
                }
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedId = localStorage.getItem('user_id');
            if (storedId && !isNaN(storedId)) {
                const userId = parseInt(storedId);
                console.log('üî• Fallback: User ID –∏–∑ localStorage:', userId);
                return userId;
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ localStorage
            const telegramUserId = localStorage.getItem('telegram_user_id');
            if (telegramUserId && !isNaN(telegramUserId)) {
                const userId = parseInt(telegramUserId);
                console.log('üî• Fallback: User ID –∏–∑ telegram_user_id:', userId);
                return userId;
            }
            
            // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            const fallbackId = 5930269100;
            console.warn('‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default user_id:', fallbackId);
            return fallbackId;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback getUserId:', error);
            const emergencyId = 5930269100;
            console.warn('üö® EMERGENCY fallback user_id:', emergencyId);
            return emergencyId;
        }
    }

    // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ userId –≤ –∞–Ω–∞–ª–∏–∑
    async analyzeSingle(imageFile, occasion = 'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', preferences = '', userId = null) {
        try {
            // üî• –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º userId –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            if (!userId) {
                userId = this.getCurrentUserId();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –Ω–µ null –∏ –Ω–µ undefined
            if (!userId || userId === null || userId === undefined || isNaN(userId)) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞');
            }

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑:', { 
                filename: imageFile.name, 
                size: imageFile.size, 
                type: imageFile.type, 
                occasion: occasion,
                userId: userId  // ‚úÖ –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï null
            });

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
            const imageData = await this.fileToBase64(imageFile);
            
            const requestData = {
                user_id: userId,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º user_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                occasion: occasion,
                preferences: preferences,
                image_data: imageData
            };

            // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            console.log('üîç DEBUG - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
                user_id: requestData.user_id,
                occasion: requestData.occasion,
                image_size: imageData.length,
                typeof_user_id: typeof requestData.user_id,
                is_null: requestData.user_id === null,
                is_undefined: requestData.user_id === undefined
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
            const response = await this.makeRequest('/consultations/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω –æ—Ç API:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
            throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
        }
    }

    // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ userId –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    async analyzeCompare(imageFiles, occasion = 'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', preferences = '', userId = null) {
        try {
            if (!Array.isArray(imageFiles) || imageFiles.length < 2) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            if (imageFiles.length > 4) {
                throw new Error('–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }

            // üî• –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º userId –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            if (!userId) {
                userId = this.getCurrentUserId();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –Ω–µ null –∏ –Ω–µ undefined
            if (!userId || userId === null || userId === undefined || isNaN(userId)) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', { 
                count: imageFiles.length, 
                files: imageFiles.map(f => ({ name: f.name, size: f.size, type: f.type })), 
                occasion: occasion,
                userId: userId  // ‚úÖ –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï null
            });

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ base64
            const imagesData = await Promise.all(
                imageFiles.map(file => this.fileToBase64(file))
            );
            
            const requestData = {
                user_id: userId,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º user_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                occasion: occasion,
                preferences: preferences,
                images_data: imagesData
            };

            // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            console.log('üîç DEBUG - –î–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', {
                user_id: requestData.user_id,
                occasion: requestData.occasion,
                images_count: imagesData.length,
                typeof_user_id: typeof requestData.user_id,
                is_null: requestData.user_id === null,
                is_undefined: requestData.user_id === undefined
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const response = await this.makeRequest('/consultations/compare', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            console.log('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API:', response);
            return response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
            throw new Error(`–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64
    async fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "data:image/jpeg;base64," –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ base64 –¥–∞–Ω–Ω—ã–µ
                const base64 = reader.result.split(',')[1];
                resolve(base64);
            };
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    async getStatus() {
        try {
            const response = await this.makeRequest('/status', {
                method: 'GET',
                timeout: 5000
            });
            console.log('üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', response);
            return response;
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å:', error.message);
            return null;
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    isAvailable() {
        return this.isHealthy && this.lastHealthCheck && 
               (new Date() - this.lastHealthCheck) < 60000; // –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    }

    getLastHealthCheck() {
        return this.lastHealthCheck;
    }

    getBaseURL() {
        return this.baseURL;
    }

    setTimeout(timeout) {
        this.timeout = Math.max(timeout, 5000); // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
        console.log('‚è∞ Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this.timeout + 'ms');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
    validateImageFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        const maxSize = 20 * 1024 * 1024; // 20MB

        if (!allowedTypes.includes(file.type)) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.type}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${allowedTypes.join(', ')}`);
        }

        if (file.size > maxSize) {
            throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${(file.size / 1024 / 1024).toFixed(1)}MB. –ú–∞–∫—Å–∏–º—É–º: ${maxSize / 1024 / 1024}MB`);
        }

        return true;
    }

    validateImageFiles(files) {
        if (!Array.isArray(files)) {
            files = [files];
        }

        files.forEach((file, index) => {
            try {
                this.validateImageFile(file);
            } catch (error) {
                throw new Error(`–§–∞–π–ª ${index + 1}: ${error.message}`);
            }
        });

        return true;
    }

    // –î–û–ë–ê–í–ò–¢–¨ –í –ö–û–ù–ï–¶ –ö–õ–ê–°–°–ê MishuraAPIService –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    async notifyBalanceChange(newBalance) {
        /**
         * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ UserService
         */
        try {
            if (window.userService) {
                window.userService.notifyBalanceChange(newBalance);
                console.log(`üì¢ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${newBalance}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API —Å–µ—Ä–≤–∏—Å–∞
window.MishuraAPIService = MishuraAPIService;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MishuraAPIService;
}

console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô MishuraAPIService –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window - userId –ø—Ä–æ–±–ª–µ–º–∞ –†–ï–®–ï–ù–ê!');