 Ôªø// üé≠ –ú–ò–®–£–†–ê - –¢–≤–æ–π –°—Ç–∏–ª–∏—Å—Ç
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - app.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
// –í–µ—Ä—Å–∏—è: 2.6.1 - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò

class MishuraApp {
    constructor() {
        this.initializeState();
        this.initializeAPI();
    }

    initializeState() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MishuraApp...');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.currentMode = null;
        this.currentSection = 'home';
        this.compareImages = [null, null, null, null];
        this.singleImage = null;
        this.isLoading = false;
        this.lastAnalysisResult = null;
        this.requestTimeout = 90000; // 90 —Å–µ–∫—É–Ω–¥
        this.eventListenersAttached = false;
        this.initializationComplete = false;
        
        this.balanceSync = {
            interval: null,
            lastUpdate: 0,
            isUpdating: false,
            forceUpdate: false
        };
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.userBalance = 200;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        
        // –ü–ª–∞—Ç–µ–∂–∏ –ÆKassa
        this.paymentPackages = null;
        this.currentPayment = null;
        this.paymentCheckInterval = null;
        
        this.api = null;
        
        // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤–æ–¥–æ–≤
        this.occasionOptions = [
            'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', '‚ù§Ô∏è –°–≤–∏–¥–∞–Ω–∏–µ', 'üö∂ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
            'üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞', 'üëî –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', 'üçΩÔ∏è –£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'üé≠ –¢–µ–∞—Ç—Ä/–∫–æ–Ω—Ü–µ—Ä—Ç', 'üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥',
            '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéì –£—á–µ–±–∞/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'üè† –î–æ–º–∞/–æ—Ç–¥—ã—Ö',
            'üåû –ü–ª—è–∂/–æ—Ç–ø—É—Å–∫', '‚ùÑÔ∏è –ó–∏–º–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞', 'üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
            'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ', 'üè¢ –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üë∂ –í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ—Ç—å–º–∏', 'üë• –î–µ–ª–æ–≤—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã'
        ];
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analytics = {
            appStartTime: Date.now(),
            analysisRequested: 0,
            successfulAnalysis: 0,
            errors: 0
        };
        
        this.init = this.init.bind(this);
        setTimeout(() => this.init(), 100);
    }

    async initializeAPI() {
        try {
            const healthData = await fetch(`${API_BASE_URL}/api/v1/health`).then(res => res.json());
                    console.log('üè• –°—Ç–∞—Ç—É—Å API:', healthData);
                    
                this.api = new window.MishuraAPIService();
            console.log('üöÄ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.api.constructor.name);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
            this.showNotification('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info', 3000);
            this.api = new window.MishuraAPIService();
        }
        
        this.updateAPIStatus();
    }

    updateAPIStatus() {
        const isRealAPI = this.api && !this.api.isMock;
        const statusElement = document.querySelector('.api-status');
        
        if (statusElement) {
            statusElement.textContent = isRealAPI ? 'üåê –†–µ–∞–ª—å–Ω—ã–π API' : 'üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º';
            statusElement.className = `api-status ${isRealAPI ? 'real' : 'demo'}`;
        }
        
        console.log('üîß API —Å—Ç–∞—Ç—É—Å:', isRealAPI ? '–†–µ–∞–ª—å–Ω—ã–π API' : '–î–µ–º–æ-—Ä–µ–∂–∏–º');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        if (this.initializationComplete) return;

        try {
            // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserService
            if (window.userService) {
                await this.initializeUserService();
            }
            
            await this.checkForSuccessfulPayment();
            
            this.setupNavigation();
            this.fixModeButtons();
            this.setupBasicEventHandlers();
            this.loadUserData();
            
            this.initFeedbackSystem();
            
            // –û–ë–ù–û–í–õ–ï–ù–û: –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            this.startAdvancedBalanceSync();
            
            this.setupTelegramIntegration();
            this.initModularNavigation();
            
            this.addDropdownStyles();
            
            this.initializationComplete = true;
            
            console.log('‚úÖ MishuraApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å UserService');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }

        this.lastConsultationId = null;
    }

    // –ù–û–í–´–ô –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserService
    async initializeUserService() {
        try {
            console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserService...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = window.userService.getCurrentUserId();
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${userId}`);
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
            const balance = await window.userService.getBalance(true);
            if (balance !== null && balance !== this.userBalance) {
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.userBalance} ‚Üí ${balance}`);
                this.userBalance = balance;
                this.saveUserData();
                this.updateBalanceDisplay();
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            document.addEventListener('balanceChanged', (event) => {
                const newBalance = event.detail.balance;
                if (newBalance !== this.userBalance) {
                    console.log(`üì¢ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${this.userBalance} ‚Üí ${newBalance}`);
                    this.userBalance = newBalance;
                    this.saveUserData();
                    this.updateBalanceDisplay();
                    this.animateBalanceChange();
                }
            });
            
            console.log('‚úÖ UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserService:', error);
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    startAdvancedBalanceSync() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞...');
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        this.balanceSync.interval = setInterval(async () => {
            if (!this.balanceSync.isUpdating && window.userService) {
                await this.advancedSyncBalance();
            }
        }, 30000);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        document.addEventListener('visibilitychange', async () => {
            if (!document.hidden && window.userService && !this.balanceSync.isUpdating) {
                await this.advancedSyncBalance();
            }
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
        window.addEventListener('focus', async () => {
            if (window.userService && !this.balanceSync.isUpdating) {
                await this.advancedSyncBalance();
            }
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ online/offline
        window.addEventListener('online', async () => {
            console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å');
            if (window.userService && !this.balanceSync.isUpdating) {
                await this.advancedSyncBalance();
            }
        });
        
        console.log('‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    }

    // –ù–û–í–´–ô –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    async advancedSyncBalance() {
        const now = Date.now();
        
        // –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
        if (now - this.balanceSync.lastUpdate < 10000 && !this.balanceSync.forceUpdate) {
            return;
        }
        
        console.log('üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');
        
        try {
            this.balanceSync.isUpdating = true;
            
            if (!window.userService) {
                console.warn('‚ö†Ô∏è UserService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                await this.syncBalance(); // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ UserService
            const newBalance = await window.userService.getBalance(this.balanceSync.forceUpdate);
            
            if (newBalance !== null && newBalance !== this.userBalance) {
                const oldBalance = this.userBalance;
                this.userBalance = newBalance;
                this.saveUserData();
                
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${oldBalance} ‚Üí ${newBalance}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.updateBalanceDisplay();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏
                if (newBalance > oldBalance) {
                    const difference = newBalance - oldBalance;
                    this.showNotification(
                        `üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${difference} STcoin!`, 
                        'success', 
                        4000
                    );
                    this.animateBalanceChange();
                }
            }
            
            this.balanceSync.lastUpdate = now;
            this.balanceSync.forceUpdate = false;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            try {
                await this.syncBalance();
            } catch (fallbackError) {
                console.error('‚ùå Fallback —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å:', fallbackError);
            }
        } finally {
            this.balanceSync.isUpdating = false;
        }
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async forceBalanceUpdate() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
        
        if (window.userService) {
            try {
                const balance = await window.userService.syncBalance();
                if (balance !== null) {
                    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UserService –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                    return;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ UserService:', error);
            }
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        this.balanceSync.forceUpdate = true;
        await this.syncBalance();
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è userId
    getUserId() {
        if (window.userService) {
            try {
                const userId = window.userService.getCurrentUserId();
                console.log(`‚úÖ User ID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ UserService: ${userId}`);
                return userId;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è User ID —á–µ—Ä–µ–∑ UserService:', error);
            }
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è User ID');
        return this.getFallbackUserId();
    }

    // –ù–û–í–´–ô fallback –º–µ—Ç–æ–¥
    getFallbackUserId() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
            if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ Fallback: Telegram ID:', telegramId);
                return parseInt(telegramId);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedId = localStorage.getItem('user_id');
            if (storedId && !isNaN(storedId)) {
                const userId = parseInt(storedId);
                console.log('‚úÖ Fallback: localStorage ID:', userId);
                return userId;
            }
            
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            const defaultId = 5930269100;
            console.warn('‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º default ID:', defaultId);
            return defaultId;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback getUserId:', error);
            return 5930269100;
        }
    }

    // –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    async diagnoseSyncIssues() {
        console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–ê ===');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UserService
        if (window.userService) {
            await window.userService.diagnose();
        } else {
            console.warn('‚ö†Ô∏è UserService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ app.js
        console.log('üì± App.js —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
        console.log(`   userBalance: ${this.userBalance}`);
        console.log(`   consultationsHistory: ${this.consultationsHistory.length}`);
        console.log(`   –±–∞–ª–∞–Ω—ÅSync.lastUpdate: ${new Date(this.balanceSync.lastUpdate).toLocaleTimeString()}`);
        console.log(`   balanceSync.isUpdating: ${this.balanceSync.isUpdating}`);
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ localStorage
        console.log('üíæ LocalStorage:');
        console.log(`   mishura_user_data: ${localStorage.getItem('mishura_user_data')}`);
        console.log(`   user_id: ${localStorage.getItem('user_id')}`);
        console.log(`   current_user_session: ${localStorage.getItem('current_user_session')}`);
        
        console.log('üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
    }

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –º–µ—Ç–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    loadUserData() {
        try {
            const data = JSON.parse(localStorage.getItem('mishura_user_data') || '{}');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 50 –≤–º–µ—Å—Ç–æ 200
            this.userBalance = data.balance || 50; // –ë—ã–ª–æ: || 200
            this.consultationsHistory = data.consultations || [];
            this.lastSyncTimestamp = data.lastSync || 0;
            
            // üÜï –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
            this.validateAndSyncBalance();
            
            this.updateUI();
            console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                balance: this.userBalance,
                consultations: this.consultationsHistory.length,
                lastSync: new Date(this.lastSyncTimestamp).toLocaleString()
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.initializeUserData();
        }
    }

    // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async validateAndSyncBalance() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ UserService
            if (window.userService) {
                const serverBalance = await window.userService.getActualBalance();
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if (Math.abs(this.userBalance - serverBalance) > 0.01) {
                    console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: localStorage=${this.userBalance} —Å–µ—Ä–≤–µ—Ä=${serverBalance}`);
                    console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    this.userBalance = serverBalance;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    this.saveUserData();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.updateUI();
                    
                    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${serverBalance} STcoin`);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        }
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: initializeUserData
    async initializeUserData() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        this.userBalance = 50;
        this.consultationsHistory = [];
        this.lastSyncTimestamp = Date.now();
        this.saveUserData();
        this.updateUI();
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: 50 STcoin');
    }

    saveUserData() {
        try {
            const data = {
                balance: this.userBalance,
                history: this.consultationsHistory,
                used: this.consultationsUsed,
                lastSaved: Date.now()
            };
            
            localStorage.setItem('mishura_user_data', JSON.stringify(data));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    async checkForSuccessfulPayment() {
        const urlParams = new URLSearchParams(window.location.search);
        const paymentSuccess = urlParams.get('payment_success'); // 'true', –Ω–µ '1'
        const section = urlParams.get('section');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', { 
            paymentSuccess, 
            section,
            fullUrl: window.location.href 
        });

        if (paymentSuccess === 'true') {
            console.log('üéâ –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!');
            
            setTimeout(async () => {
                await this.forceBalanceUpdate();
            }, 1000);
            
            // üß≠ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
            setTimeout(() => {
                this.navigateToSection('balance');
            }, 1500);
            
            // üßπ –û—á–∏—Å—Ç–∫–∞ URL
            setTimeout(() => {
                const newUrl = window.location.origin + window.location.pathname;
                window.history.replaceState({}, document.title, newUrl);
                console.log('üßπ URL –æ—á–∏—â–µ–Ω –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã');
            }, 3000);
        }
    }

    showPaymentSuccessNotification() {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.querySelectorAll('.payment-success-notification').forEach(el => el.remove());
        
        const notification = document.createElement('div');
        notification.className = 'payment-success-notification';
        notification.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #4CAF50, #45a049);
                color: white;
                padding: 20px;
                border-radius: 16px;
                box-shadow: 0 8px 32px rgba(76, 175, 80, 0.4);
                z-index: 10000;
                animation: slideInRight 0.5s ease-out;
                max-width: 300px;
            ">
                <div style="display: flex; align-items: center; gap: 12px;">
                    <div style="font-size: 28px;">‚úÖ</div>
                    <div>
                        <div style="font-weight: 700; font-size: 18px; margin-bottom: 4px;">
                            –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
                        </div>
                        <div style="font-size: 14px; opacity: 0.9;">
                            –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 6000);
    }

    animateBalanceChange() {
        const balanceElements = document.querySelectorAll('.balance-amount, .balance-value, [data-balance-display]');
        
        balanceElements.forEach(element => {
            element.style.animation = 'balanceUpdate 1s ease-out';
            
            setTimeout(() => {
                element.style.animation = '';
            }, 1000);
        });
    }

    updateBalanceDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
        const balanceElements = document.querySelectorAll('.balance-amount, .balance-value, [data-balance-display]');
        balanceElements.forEach(element => {
            element.textContent = this.userBalance;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        const consultationsElements = document.querySelectorAll('[data-consultations-display]');
        consultationsElements.forEach(element => {
            element.textContent = consultationsRemaining;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        const balanceTitle = document.querySelector('#balance-section .section-title');
        if (balanceTitle) {
            balanceTitle.innerHTML = `üí∞ –ë–∞–ª–∞–Ω—Å: <span class="balance-highlight">${this.userBalance}</span> STCoins`;
        }
        
        console.log('üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', this.userBalance);
    }

    setupBasicEventHandlers() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        this.setupCloseButtons();
        this.setupSubmitButton();
        this.initUploaders();
        this.setupOccasionDropdown();
        this.setupResultNavigation();
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupNavigation() {
        if (this.navigationSetup) return;
        console.log('üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const section = newBtn.id.replace('nav-', '');
                console.log('üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
                
                document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
                newBtn.classList.add('active');
                
                this.navigateToSection(section);
                this.triggerHapticFeedback('light');
            });
        });
        
        this.navigationSetup = true;
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    fixModeButtons() {
        const singleBtn = document.getElementById('single-mode-btn');
        const compareBtn = document.getElementById('compare-mode-btn');
        
        if (singleBtn) {
            const newSingleBtn = singleBtn.cloneNode(true);
            singleBtn.parentNode.replaceChild(newSingleBtn, singleBtn);
            newSingleBtn.addEventListener('click', () => {
                console.log('üì∑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞');
                this.openSingleModal();
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–∞ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }

        if (compareBtn) {
            const newCompareBtn = compareBtn.cloneNode(true);
            compareBtn.parentNode.replaceChild(newCompareBtn, compareBtn);
            newCompareBtn.addEventListener('click', () => {
                console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤');
                this.openCompareModal();
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }
    }

    navigateToSection(section) {
        console.log('üß≠ app.js: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
        
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const targetBtn = document.getElementById(`nav-${section}`);
            if (targetBtn) {
                targetBtn.classList.add('active');
            }
        
            this.currentSection = section;
            this.closeModal();
        
        if (window.MishuraApp?.components?.navigation) {
            window.MishuraApp.components.navigation.navigateTo(section);
        } else {
            this.showSection(section);
        }
    }

    showSection(section) {
        console.log('üìÑ –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏:', section);
        switch (section) {
            case 'home':
                this.showHomeSection();
                break;
            case 'history':
                this.showHistorySection();
                break;
            case 'balance':
                this.showBalanceSection();
                break;
            default:
                console.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è:', section);
        }
    }

    showHomeSection() {
        console.log('üè† –ü–æ–∫–∞–∑ –¥–æ–º–∞—à–Ω–µ–π —Å–µ–∫—Ü–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        container.innerHTML = `
            <header class="header">
                <h1>‚ú® –ú–ò–®–£–†–ê</h1>
                <p>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –≤ –∫–∞—Ä–º–∞–Ω–µ</p>
            </header>

            <div class="action-buttons">
                <button id="single-mode-btn" class="action-btn">
                    <span class="icon">üì∑</span>
                    –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞
                </button>
                <button id="compare-mode-btn" class="action-btn">
                    <span class="icon">üîÑ</span>
                    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
                </button>
            </div>
        `;
        
        setTimeout(() => {
            this.fixModeButtons();
        }, 100);
    }

    async showBalanceSection() {
        console.log('üí∞ –ü–û–ö–ê–ó –°–ï–ö–¶–ò–ò –ë–ê–õ–ê–ù–°–ê');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–µ–∫—Ü–∏—é
        await this.forceBalanceUpdate();
        
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        container.innerHTML = `
            <div class="balance-card" style="
                background: var(--gold-gradient);
                color: var(--text-dark);
                border-radius: 20px;
                padding: 24px;
                margin-bottom: 24px;
                text-align: center;
                box-shadow: var(--shadow-gold);
            ">
                <div style="font-size: 2.5rem; font-weight: 900; margin-bottom: 8px;" data-balance-display>
                    ${this.userBalance}
                </div>
                <div style="font-size: 1.1rem; font-weight: 600; text-transform: uppercase;">
                    STcoin
                </div>
                <div style="font-size: 0.9rem; margin-top: 8px; opacity: 0.8;">
                    –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: <span data-consultations-display>${consultationsRemaining}</span>
                </div>
            </div>
            
            <div class="usage-stats" style="
                background: rgba(26, 26, 26, 0.8);
                border: 1px solid var(--border-light);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 24px;
            ">
                <h3 style="
                    color: var(--text-gold);
                    margin-bottom: 16px;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-size: 1rem;
                ">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsHistory.length}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ STcoin:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsUsed}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span style="color: var(--text-muted);">–û—Å—Ç–∞—Ç–æ–∫ STcoin:</span>
                    <span style="color: var(--text-gold); font-weight: 600;" data-balance-display>${this.userBalance}</span>
                </div>
            </div>
            
            <div class="balance-actions">
                <button class="action-btn" onclick="window.mishuraApp.showPaymentModal()" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid var(--border-gold);
                    color: var(--text-gold);
                    padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí≥</span>
                    –ü–æ–ø–æ–ª–Ω–∏—Ç—å STcoin
                </button>
                
                <button class="action-btn" onclick="window.open('https://t.me/marketolog_online', '_blank')" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid rgba(0, 123, 255, 0.5);
                    color: #007bff;
                        padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí¨</span>
                    –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                </button>
            </div>
        `;
    }

    showHistorySection() {
        console.log('üìö –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        const history = this.consultationsHistory.slice(-10).reverse();
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        let historyHTML = `
            <header class="header">
                <h1>üìö –ò—Å—Ç–æ—Ä–∏—è</h1>
                <p>–í–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞</p>
            </header>
            
            <div class="stats-card" style="
                background: rgba(212, 175, 55, 0.1);
                border: 1px solid var(--border-gold);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 20px;
                text-align: center;
            ">
                <div style="color: var(--text-gold); font-size: 1.2rem; font-weight: 700; margin-bottom: 6px;">
                    –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${consultationsRemaining}
                </div>
                <div style="color: var(--text-muted); font-size: 0.9rem;">
                    ${this.userBalance} STcoin
                </div>
            </div>
        `;

        if (history.length === 0) {
            historyHTML += `
                <div style="text-align: center; padding: 40px 20px; color: var(--text-muted);">
                    <div style="font-size: 3rem; margin-bottom: 16px;">üìù</div>
                    <div style="font-size: 1.1rem;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
                    <div style="font-size: 0.9rem; margin-top: 8px;">
                        –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
                    </div>
                </div>
            `;
        } else {
            historyHTML += '<div class="history-list">';
            
            history.forEach((consultation, index) => {
                const date = new Date(consultation.timestamp).toLocaleDateString('ru-RU');
                const time = new Date(consultation.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                historyHTML += `
                    <div class="history-item" style="
                        background: rgba(26, 26, 26, 0.8);
                        border: 1px solid var(--border-light);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 12px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="window.mishuraApp.viewConsultation(${this.consultationsHistory.length - 1 - index})">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 8px;
                        ">
                            <span style="
                                color: var(--text-gold);
                                font-weight: 600;
                                text-transform: uppercase;
                                font-size: 0.9rem;
                            ">${consultation.occasion}</span>
                            <span style="
                                color: var(--text-muted);
                                font-size: 0.8rem;
                            ">${date} ${time}</span>
                        </div>
                        <div style="
                            color: var(--text-light);
                            font-size: 0.9rem;
                            line-height: 1.4;
                            display: -webkit-box;
                            -webkit-line-clamp: 2;
                            -webkit-box-orient: vertical;
                            overflow: hidden;
                        ">
                            ${consultation.advice.replace(/<[^>]*>/g, '').substring(0, 100)}...
                        </div>
                    </div>
                `;
            });
            
            historyHTML += '</div>';
        }

        container.innerHTML = historyHTML;
    }

    // === –ü–õ–ê–¢–ï–ñ–ò ===
    
    showPaymentModal() {
        if (!window.PRICING_PLANS) {
            this.showNotification('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã...', 'info');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.id = 'payment-modal';
        
        let packagesHTML = '';
        Object.entries(window.PRICING_PLANS).forEach(([planId, plan]) => {
            const isPopular = plan.popular;
            packagesHTML += `
                <div class="pricing-card ${isPopular ? 'popular' : ''}" 
                     onclick="window.mishuraApp.initiatePayment('${planId}')"
                     style="
                        background: ${isPopular ? 'rgba(212, 175, 55, 0.1)' : 'rgba(26, 26, 26, 0.8)'};
                        border: 2px solid ${isPopular ? 'var(--border-gold)' : 'var(--border-light)'};
                        border-radius: 16px;
                        padding: 20px;
                        margin-bottom: 16px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        position: relative;
                     ">
                    ${isPopular ? '<div style="position: absolute; top: -8px; right: 16px; background: var(--gold-gradient); color: var(--text-dark); padding: 4px 12px; border-radius: 12px; font-size: 0.8rem; font-weight: 600;">üî• –ü–û–ü–£–õ–Ø–†–ù–´–ô</div>' : ''}
                    
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
                        <h3 style="color: var(--text-gold); margin: 0; font-size: 1.2rem;">${plan.name}</h3>
                        <div style="color: var(--text-light); font-size: 1.5rem; font-weight: 700;">${plan.price}‚ÇΩ</div>
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="color: var(--text-light);">
                            <span style="font-size: 1.1rem; font-weight: 600;">${plan.stcoins}</span>
                            <span style="color: var(--text-muted); margin-left: 4px;">STcoin</span>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">
                            ${plan.consultations} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                        </div>
                    </div>
                </div>
            `;
        });

        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ STcoin</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 20px;
                        text-align: center;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa
                        </div>
                        <div style="color: var(--text-light); font-size: 0.9rem;">
                            –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã Visa, MasterCard, –ú–ò–†, –°–ë–ü –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
                        </div>
                    </div>
                    
                    <div class="payment-packages">
                        ${packagesHTML}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    async initiatePayment(planId) {
        const plan = window.PRICING_PLANS[planId];
        if (!plan) {
            this.showNotification('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        try {
            this.showNotification('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...', 'info');
            
            const userId = this.getUserId();
            console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, '–ø–ª–∞–Ω:', planId);
            
            const paymentData = {
                telegram_id: userId,
                plan_id: planId
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', paymentData);
            
            const response = await fetch(`${API_BASE_URL}/api/v1/payments/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (result.payment_url) {
                this.showNotification('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...', 'success');
                console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆKassa:', result.payment_url);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –ø–ª–∞—Ç–µ–∂–µ–π
                const paymentModal = document.getElementById('payment-modal');
                if (paymentModal) {
                    paymentModal.remove();
                }

                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆKassa
                if (window.Telegram?.WebApp?.openLink) {
                    console.log('üì≤ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram WebApp');
                    window.Telegram.WebApp.openLink(result.payment_url, { try_instant_view: false });
                } else {
                    window.location.href = result.payment_url;
                }

            } else {
                throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error', 5000);
        }
    }

    // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
    
    openSingleModal() {
        this.currentMode = 'single';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞';
        }
        this.showModal('single-mode');
    }

    openCompareModal() {
        this.currentMode = 'compare';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤';
        }
        this.showModal('compare-mode');
    }

    showModal(mode) {
        const overlay = document.getElementById('consultation-overlay');
        const modes = document.querySelectorAll('.upload-mode');
        
        modes.forEach(m => m.classList.remove('active'));
        const targetMode = document.getElementById(mode);
        if (targetMode) {
            targetMode.classList.add('active');
        }
        
        if (overlay) {
            overlay.classList.add('active');
        }
        
        this.clearForm();
        this.hideForm();
        this.hideLoading();
        this.hideResult();
    }

    closeModal() {
        console.log('üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
        
        // –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
        this.closeDropdown();
        
        // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ closeModal –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const modals = document.querySelectorAll('.modal-overlay');
        const resultSection = document.getElementById('result');
        
        const isResultVisible = resultSection && resultSection.classList.contains('active');
        
        if (isResultVisible && this.lastConsultationId) {
            const consultationIdForFeedback = this.lastConsultationId;
            
            modals.forEach(modal => {
                modal.classList.remove('active');
            });
            
            const sections = ['loading', 'consultation-form', 'result'];
            sections.forEach(sectionId => {
                const element = document.getElementById(sectionId);
                if (element) {
                    element.classList.remove('active');
                }
            });
            
            document.body.classList.remove('modal-open');
            
            setTimeout(() => {
                this.showFeedbackModal(consultationIdForFeedback);
            }, 500);
            
            this.lastConsultationId = null;
            
        } else {
            modals.forEach(modal => {
                modal.classList.remove('active');
            });
            
            const sections = ['loading', 'consultation-form', 'result'];
            sections.forEach(sectionId => {
                const element = document.getElementById(sectionId);
                if (element) {
                    element.classList.remove('active');
                }
            });
            
            document.body.classList.remove('modal-open');
        }
        
        this.clearForm();
        this.clearImages();
    }

    clearForm() {
        const occasion = document.getElementById('occasion');
        const preferences = document.getElementById('preferences');
        const options = document.getElementById('occasion-options');
        
        if (occasion) occasion.value = '';
        if (preferences) preferences.value = '';
        if (options) options.classList.remove('active');
        
        this.updateSubmitButton();
    }

    clearImages() {
        this.singleImage = null;
        this.compareImages = [null, null, null, null];
        
        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            singlePreview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
            singlePreview.classList.remove('has-image');
        }
        
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            slot.innerHTML = `
                <span class="slot-number">${index + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        });
    }

    updateSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        
        let hasImages = false;
        if (this.currentMode === 'single') {
            hasImages = this.singleImage !== null;
        } else if (this.currentMode === 'compare') {
            hasImages = this.compareImages.filter(img => img !== null).length >= 2;
        }
        
        if (submitBtn) {
            submitBtn.disabled = !hasImages || !occasion;
        }
    }

    hideForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.remove('active');
    }

    showForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.add('active');
        this.updateSubmitButton();
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) loading.classList.remove('active');
    }

    showLoading() {
        this.isLoading = true;
        
        const sections = {
            loading: true,
            'consultation-form': false,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
    }

    hideResult() {
        const result = document.getElementById('result');
        if (result) result.classList.remove('active');
    }

    showResult(result) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤
        this.lastConsultationId = result.consultation_id || Date.now();
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞:', this.lastConsultationId);
        // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ ...
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': false,
            result: true
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        const normalizedResult = this.normalizeAPIResponse(result);
        
        const content = document.getElementById('result-content');
        if (content) {
            content.innerHTML = this.formatAdvice(normalizedResult.advice);
        }
        
        const resultSection = document.getElementById('result');
        if (resultSection && !resultSection.querySelector('#result-back')) {
            const navButtons = document.createElement('div');
            navButtons.style.cssText = 'display: flex; gap: 12px; justify-content: center; margin-top: 20px;';
            navButtons.innerHTML = `
                <button id="result-back" style="
                    background: var(--bg-tertiary);
                    color: var(--text-primary);
                    border: 1px solid var(--accent-gold);
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É</button>
                <button id="result-new" style="
                    background: var(--accent-gold);
                    color: var(--bg-primary);
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">üÜï –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</button>
            `;
            resultSection.appendChild(navButtons);
        }
        
        const consultation = {
            id: Date.now(),
            type: this.currentMode,
            occasion: document.getElementById('occasion')?.value || '',
            preferences: document.getElementById('preferences')?.value || '',
            advice: normalizedResult.advice,
            timestamp: new Date().toISOString(),
            imagesCount: this.currentMode === 'compare' ? 
                this.compareImages.filter(img => img !== null).length : 1,
            metadata: normalizedResult.metadata || {}
        };
        
        this.deductConsultation(10);
        this.consultationsHistory.push(consultation);
        this.saveUserData();
        
        if (this.userBalance <= 50) {
            setTimeout(() => {
                const consultationsRemaining = Math.floor(this.userBalance / 10);
                this.showNotification(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${consultationsRemaining} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π`, 'warning', 4000);
            }, 2000);
        }
        
        if (consultation && consultation.id) {
            setTimeout(() => {
                this.checkAndShowFeedbackPrompt(consultation.id);
            }, Math.random() * 120000 + 60000); // 1-3 –º–∏–Ω—É—Ç—ã
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ ID
            const mockConsultationId = Date.now();
            setTimeout(() => {
                this.checkAndShowFeedbackPrompt(mockConsultationId);
            }, Math.random() * 120000 + 60000);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        setTimeout(() => {
            const mockConsultationId = Date.now();
            console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã');
            this.checkAndShowFeedbackPrompt(mockConsultationId);
        }, 120000); // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    normalizeAPIResponse(response) {
        if (response && typeof response === 'object') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ advice –∏ analysis
            const advice = response.advice || response.analysis;
            
            if (advice) {
                return {
                    advice: advice,
                    metadata: response.metadata || {
                        timestamp: new Date().toISOString(),
                        status: response.status || 'success'
                    }
                };
            }
        }
        
        if (typeof response === 'string') {
            return {
                advice: response,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: 'success',
                    source: 'string_response'
                }
            };
        }
        
        if (response && response.message) {
            return {
                advice: response.message,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: response.status || 'success',
                    source: 'message_field'
                }
            };
        }
        
        return {
            advice: '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            metadata: {
                timestamp: new Date().toISOString(),
                status: 'warning',
                source: 'fallback'
            }
        };
    }

    showError(message) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': true,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        this.showNotification(message, 'error');
    }

    formatAdvice(advice) {
        if (!advice) return '';
        
        let processedAdvice = this.parseMarkdownStructure(advice);
        
        const colorMapping = {
            '—Å–∏–Ω–∏–π': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω–µ–º': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω—è—è': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω—ã–π': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–æ–º': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–∞—è': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª—ã–π': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–æ–º': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–∞—è': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω—ã–π': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–æ–º': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–∞—è': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑'
        };
        
        const descriptionsToRemove = [
            /–ù–∞ –ø–µ—Ä–≤–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ –≤—Ç–æ—Ä–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ç—Ä–µ—Ç—å–µ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ñ–æ—Ç–æ.*?–≤—ã.*?–æ–¥–µ—Ç—ã.*?\./gi,
            /–Ø –≤–∏–∂—É.*?—á—Ç–æ.*?–Ω–∞.*?\./gi,
            /–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.*?\./gi
        ];
        
        descriptionsToRemove.forEach(pattern => {
            processedAdvice = processedAdvice.replace(pattern, '');
        });
        
        Object.entries(colorMapping).forEach(([color, title]) => {
            const regex = new RegExp(`(–≤|–Ω–∞)\\s+${color}[–∞-—è]*\\s+(–ø–ª–∞—Ç—å–µ|—Ä—É–±–∞—à–∫–µ|—Ñ—É—Ç–±–æ–ª–∫–µ|–±–ª—É–∑–∫–µ|–∫–æ—Å—Ç—é–º–µ|–∂–∞–∫–µ—Ç–µ|–ø–∏–¥–∂–∞–∫–µ|–±—Ä—é–∫–∞—Ö|–¥–∂–∏–Ω—Å–∞—Ö|—é–±–∫–µ|—à–æ—Ä—Ç–∞—Ö|—Ç–æ–ø–µ|–∫–∞—Ä–¥–∏–≥–∞–Ω–µ|—Å–≤–∏—Ç–µ—Ä–µ|–ø–∞–ª—å—Ç–æ|–∫—É—Ä—Ç–∫–µ)`, 'gi');
            processedAdvice = processedAdvice.replace(regex, `<span class="outfit-title">${title}</span>`);
        });
        
        return processedAdvice;
    }

    parseMarkdownStructure(text) {
        if (!text) return '';
        
        text = text.replace(/^### (.*$)/gm, '<h4>$1</h4>');
        text = text.replace(/^## (.*$)/gm, '<h3>$1</h3>');
        text = text.replace(/^# (.*$)/gm, '<h2>$1</h2>');
        text = text.replace(/\*\*(.*?):\*\*/g, '<h4>$1</h4>');
        text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
        text = text.replace(/^- (.*$)/gm, '<li>$1</li>');
        text = text.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
        
        const paragraphs = text.split('\n\n').filter(p => p.trim());
        let formattedText = '';
        
        paragraphs.forEach(paragraph => {
            paragraph = paragraph.trim();
            if (paragraph) {
                if (paragraph.startsWith('<h') || paragraph.startsWith('<ul') || paragraph.startsWith('<div')) {
                    formattedText += paragraph;
                } else {
                    formattedText += `<p>${paragraph}</p>`;
                }
            }
        });
        
        return formattedText;
    }

    // === –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú ===
    
    async submit() {
        if (this.isLoading) return;
        
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        const preferences = document.getElementById('preferences')?.value?.trim() || '';
        
        if (!occasion) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (this.userBalance < 10) {
            this.showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoin! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.analytics.analysisRequested++;
        
        if (this.currentMode === 'single') {
            await this.submitSingle(occasion, preferences);
        } else if (this.currentMode === 'compare') {
            await this.submitCompare(occasion, preferences);
        }
    }

    async submitSingle(occasion, preferences) {
        if (!this.singleImage) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeSingle(this.singleImage, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            } else if (error.message.includes('—Å–µ—Ç–∏') || error.message.includes('network')) {
                errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            } else if (error.message.includes('API')) {
                errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    async submitCompare(occasion, preferences) {
        const images = this.compareImages.filter(img => img !== null);
        
        if (images.length < 2) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeCompare(images, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.';
            } else if (error.message.includes('—Ä–∞–∑–º–µ—Ä') || error.message.includes('size')) {
                errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
    
    showNotification(message, type = 'info', duration = 3000) {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        
        const colors = {
            'success': '#10B981',
            'error': '#EF4444',
            'warning': '#F59E0B',
            'info': '#3B82F6'
        };
        
        notification.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type]};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 8px;
                max-width: 90vw;
                animation: slideInDown 0.3s ease;
            ">
                <span>${icons[type]}</span>
                <span>${message}</span>
            </div>
        `;
        
        if (!document.getElementById('notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                @keyframes slideInDown {
                    from {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                }
                
                @keyframes slideOutUp {
                    from {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                    to {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                }

                @keyframes balanceUpdate {
                    0% { transform: scale(1); }
                    50% { transform: scale(1.1); color: #4CAF50; }
                    100% { transform: scale(1); }
                }

                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }

                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }

                .balance-highlight {
                    color: #4CAF50;
                    font-weight: bold;
                    text-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
                }
            `;
            document.head.appendChild(styles);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            const notificationElement = notification.querySelector('div');
            if (notificationElement) {
                notificationElement.style.animation = 'slideOutUp 0.3s ease forwards';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, duration);
    }

    // === –ó–ê–ì–†–£–ó–ß–ò–ö–ò –§–ê–ô–õ–û–í ===
    
    initUploaders() {
        this.setupSingleUploader();
        this.setupCompareUploader();
    }

    setupSingleUploader() {
        const preview = document.getElementById('single-preview');
        const fileInput = document.getElementById('single-file-input');
        
        if (preview && fileInput) {
            preview.addEventListener('click', () => {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    this.handleSingleFile(file);
                }
            });
        }
    }

    setupCompareUploader() {
        const slots = document.querySelectorAll('.compare-slot');
        
        slots.forEach((slot, i) => {
            if (!slot.id) {
                slot.id = `compare-slot-${i}`;
            }
            
            const fileInput = document.getElementById(`compare-file-input-${i}`);
            
            if (slot && fileInput) {
                const newSlot = slot.cloneNode(true);
                slot.parentNode.replaceChild(newSlot, slot);
                
                newSlot.addEventListener('click', () => {
                    fileInput.click();
                });
                
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        this.handleCompareFile(file, i);
                    }
                    event.target.value = '';
                });
            }
        });
    }

    handleSingleFile(file) {
        if (!this.validateFile(file)) return;
        
        this.singleImage = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const preview = document.getElementById('single-preview');
            if (preview) {
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                preview.classList.add('has-image');
            }
            
            this.showForm();
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    handleCompareFile(file, slotIndex) {
        if (!this.validateFile(file)) return;
        
        this.compareImages[slotIndex] = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const slot = document.getElementById(`compare-slot-${slotIndex}`);
            if (slot) {
                slot.innerHTML = `<img src="${e.target.result}" alt="Compare ${slotIndex + 1}" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                slot.classList.add('has-image');
            }
            
            const loadedImages = this.compareImages.filter(img => img !== null).length;
            if (loadedImages >= 2) {
                this.showForm();
            }
            
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            this.showNotification('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP —Ñ–æ—Ä–º–∞—Ç—ã', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
            this.showNotification('‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        return true;
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ===
    
    loadUserData() {
        try {
            const data = JSON.parse(localStorage.getItem('mishura_user_data') || '{}');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 50 –≤–º–µ—Å—Ç–æ 200
            this.userBalance = data.balance || 50; // –ë—ã–ª–æ: || 200
            this.consultationsHistory = data.consultations || [];
            this.lastSyncTimestamp = data.lastSync || 0;
            
            // üÜï –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
            this.validateAndSyncBalance();
            
            this.updateUI();
            console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                balance: this.userBalance,
                consultations: this.consultationsHistory.length,
                lastSync: new Date(this.lastSyncTimestamp).toLocaleString()
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.initializeUserData();
        }
    }

    initializeUserData() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        this.userBalance = 50;
        this.consultationsHistory = [];
        this.lastSyncTimestamp = Date.now();
        this.saveUserData();
        this.updateUI();
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: 50 STcoin');
    }

    saveUserData() {
        try {
            const data = {
                balance: this.userBalance,
                history: this.consultationsHistory,
                used: this.consultationsUsed,
                lastSaved: Date.now()
            };
            
            localStorage.setItem('mishura_user_data', JSON.stringify(data));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    viewConsultation(index) {
        const consultation = this.consultationsHistory[index];
        if (!consultation) return;
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${index + 1}</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
            <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 16px;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üìÖ ${new Date(consultation.timestamp).toLocaleString('ru-RU')}
            </div>
                        <div style="color: var(--text-light); margin-bottom: 4px;">
                            <strong>–ü–æ–≤–æ–¥:</strong> ${consultation.occasion}
                        </div>
                        ${consultation.preferences ? `
                            <div style="color: var(--text-light);">
                                <strong>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</strong> ${consultation.preferences}
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="result-content">
                        ${consultation.advice}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    deductConsultation(cost = 10) {
        this.userBalance -= cost;
        this.consultationsUsed += cost;
        this.saveUserData();
        this.updateBalanceDisplay();
    }

    setupCloseButtons() {
        if (this.eventListenersAttached) return;

        document.addEventListener('click', (event) => {
            if (event.target.matches('#consultation-cancel, .close-btn, #form-cancel')) {
                this.closeModal();
                this.triggerHapticFeedback('light');
            }
        });
    }

    setupSubmitButton() {
        if (this.submitButtonSetup) return;

        document.addEventListener('click', (event) => {
            if (event.target.matches('#form-submit')) {
                event.preventDefault();
                this.submit();
            }
        });
        
        document.addEventListener('input', (event) => {
            if (['occasion', 'preferences'].includes(event.target.id)) {
                this.updateSubmitButton();
            }
        });

        this.submitButtonSetup = true;
    }

    // ========== –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï DROPDOWN-–†–ï–®–ï–ù–ò–ï ========== //

    setupOccasionDropdown() {
        if (this.occasionDropdownSetup) return;

        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ì–û dropdown —Ä–µ—à–µ–Ω–∏—è...');

        // –£–¥–∞–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π dropdown –Ω–∞–≤—Å–µ–≥–¥–∞
        setTimeout(() => {
            const builtinDropdown = document.getElementById('occasion-options');
            if (builtinDropdown) {
                builtinDropdown.remove();
            }
        }, 100);

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è dropdown
        window.DROPDOWN_STATE = {
            isOpen: false,
            element: null,
            inputElement: null
        };

        // –°–æ–∑–¥–∞–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        this.createDropdownHandler();

        this.occasionDropdownSetup = true;
        console.log('‚úÖ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô dropdown –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    createDropdownHandler() {
        // –ù–∞—Ö–æ–¥–∏–º input —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        const occasionInput = document.getElementById('occasion');
        if (!occasionInput) {
            console.error('‚ùå Input occasion –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const cleanInput = occasionInput.cloneNode(true);
        occasionInput.parentNode.replaceChild(cleanInput, occasionInput);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∏—Å—Ç—ã–π input
        window.DROPDOWN_STATE.inputElement = cleanInput;

        console.log('üßπ Input –æ—á–∏—â–µ–Ω –æ—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');

        // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input - —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏–π
        cleanInput.addEventListener('click', this.handleInputClick.bind(this), true);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ document - —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        setTimeout(() => {
            document.addEventListener('click', this.handleDocumentClick.bind(this), false);
        }, 500);

        console.log('üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π');
    }

    handleInputClick(event) {
        console.log('üéØ –ö–ª–∏–∫ –ø–æ input occasion');
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–ø–ª—ã—Ç–∏—è
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ dropdown
        if (window.DROPDOWN_STATE.isOpen) {
            this.closeDropdown();
        } else {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å document –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            setTimeout(() => {
                this.openDropdown();
            }, 50);
        }
    }

    handleDocumentClick(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dropdown –æ—Ç–∫—Ä—ã—Ç
        if (!window.DROPDOWN_STATE.isOpen || !window.DROPDOWN_STATE.element) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–∫ –ù–ï –ø–æ input –∏ –ù–ï –ø–æ dropdown
        const clickedInput = event.target === window.DROPDOWN_STATE.inputElement;
        const clickedDropdown = window.DROPDOWN_STATE.element && 
                               window.DROPDOWN_STATE.element.contains(event.target);

        if (!clickedInput && !clickedDropdown) {
            console.log('üëÜ –ö–ª–∏–∫ –≤–Ω–µ dropdown - –∑–∞–∫—Ä—ã–≤–∞–µ–º');
            this.closeDropdown();
        }
    }

    openDropdown() {
        if (window.DROPDOWN_STATE.isOpen) {
            console.log('‚ö†Ô∏è Dropdown —É–∂–µ –æ—Ç–∫—Ä—ã—Ç');
            return;
        }

        console.log('üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown...');
        
        const inputElement = window.DROPDOWN_STATE.inputElement;
        if (!inputElement) {
            console.error('‚ùå Input element –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º dropdown —ç–ª–µ–º–µ–Ω—Ç
        const dropdown = document.createElement('div');
        dropdown.className = 'final-dropdown';
        dropdown.style.cssText = this.getDropdownStyles(inputElement);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
        this.occasionOptions.forEach((option, index) => {
            const optionElement = document.createElement('div');
            optionElement.className = 'final-dropdown-option';
            optionElement.textContent = option;
            optionElement.style.cssText = this.getOptionStyles(index === this.occasionOptions.length - 1);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ü–∏–∏
            optionElement.addEventListener('mouseenter', () => {
                optionElement.style.background = 'rgba(212, 175, 55, 0.1)';
                optionElement.style.color = '#d4af37';
            });

            optionElement.addEventListener('mouseleave', () => {
                optionElement.style.background = 'transparent';
                optionElement.style.color = '#ffffff';
            });

            optionElement.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.selectOption(option);
            });

            dropdown.appendChild(optionElement);
        });

        // –ö–†–ò–¢–ò–ß–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º dropdown –≤ body, –∞ –ù–ï –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.body.appendChild(dropdown);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.DROPDOWN_STATE.isOpen = true;
        window.DROPDOWN_STATE.element = dropdown;

        console.log('‚úÖ Dropdown –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ body');
    }

    closeDropdown() {
        if (!window.DROPDOWN_STATE.isOpen || !window.DROPDOWN_STATE.element) {
            return;
        }

        console.log('üìÅ –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown...');

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        window.DROPDOWN_STATE.element.remove();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.DROPDOWN_STATE.isOpen = false;
        window.DROPDOWN_STATE.element = null;

        console.log('‚úÖ Dropdown –∑–∞–∫—Ä—ã—Ç');
    }

    selectOption(option) {
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è:', option);

        if (window.DROPDOWN_STATE.inputElement) {
            window.DROPDOWN_STATE.inputElement.value = option;
        }

        this.closeDropdown();
        this.updateSubmitButton();
        this.triggerHapticFeedback('light');
    }

    getDropdownStyles(inputElement) {
        const rect = inputElement.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        const spaceBelow = viewportHeight - rect.bottom - 20;
        const maxHeight = Math.min(Math.max(spaceBelow, 200), 350);

        return `
            position: fixed !important;
            z-index: 2147483647 !important;
            background: #1a1a1a !important;
            border: 2px solid #d4af37 !important;
            border-radius: 12px !important;
            box-shadow: 0 8px 32px rgba(212, 175, 55, 0.4) !important;
            backdrop-filter: blur(20px) !important;
            max-height: ${maxHeight}px !important;
            overflow-y: auto !important;
            overflow-x: hidden !important;
            -webkit-overflow-scrolling: touch !important;
            left: ${rect.left}px !important;
            top: ${rect.bottom + 4}px !important;
            width: ${rect.width}px !important;
            pointer-events: auto !important;
            font-family: inherit !important;
        `;
    }

    getOptionStyles(isLast) {
        return `
            padding: 14px 16px !important;
            cursor: pointer !important;
            color: #ffffff !important;
            transition: all 0.2s ease !important;
            min-height: 48px !important;
            display: flex !important;
            align-items: center !important;
            font-size: 16px !important;
            user-select: none !important;
            -webkit-tap-highlight-color: transparent !important;
            border-bottom: ${isLast ? 'none' : '1px solid rgba(212, 175, 55, 0.1)'} !important;
        `;
    }

    addDropdownStyles() {
        if (document.getElementById('final-dropdown-styles')) return;

        const styles = document.createElement('style');
        styles.id = 'final-dropdown-styles';
        styles.textContent = `
            .final-dropdown::-webkit-scrollbar {
                width: 8px !important;
            }
            .final-dropdown::-webkit-scrollbar-track {
                background: rgba(42, 42, 42, 0.8) !important;
                border-radius: 4px !important;
            }
            .final-dropdown::-webkit-scrollbar-thumb {
                background: #d4af37 !important;
                border-radius: 4px !important;
            }
            .final-dropdown::-webkit-scrollbar-thumb:hover {
                background: #f7dc6f !important;
            }
            
            @media (max-width: 768px) {
                .final-dropdown {
                    font-size: 18px !important;
                }
                .final-dropdown-option {
                    min-height: 52px !important;
                    padding: 16px !important;
                    font-size: 18px !important;
                }
            }
            
            /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π dropdown –Ω–∞–≤—Å–µ–≥–¥–∞ */
            .occasion-options,
            #occasion-options {
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                pointer-events: none !important;
            }
        `;

        document.head.appendChild(styles);
    }

    setupResultNavigation() {
        document.addEventListener('click', (event) => {
            if (event.target.matches('#result-back')) {
                this.backToSelection();
            } else if (event.target.matches('#result-new')) {
                this.startNewAnalysis();
            }
        });
    }

    backToSelection() {
        this.hideResult();
        
        if (this.currentMode === 'single') {
            const singleMode = document.getElementById('single-mode');
            if (singleMode) singleMode.classList.add('active');
        } else if (this.currentMode === 'compare') {
            const compareMode = document.getElementById('compare-mode');
            if (compareMode) compareMode.classList.add('active');
        }
        
        if ((this.currentMode === 'single' && this.singleImage) || 
            (this.currentMode === 'compare' && this.compareImages.filter(img => img !== null).length >= 2)) {
            this.showForm();
        }
    }

    startNewAnalysis() {
        this.closeModal();
    }

    setupTelegramIntegration() {
        if (window.Telegram?.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            tg.MainButton.setText('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
            tg.MainButton.show();
            
            tg.MainButton.onClick(() => {
                if (this.currentSection === 'home') {
                    this.openSingleModal();
                            } else {
                    this.navigateToSection('home');
                }
            });
        }
    }

    triggerHapticFeedback(type = 'light') {
        try {
            if (window.Telegram?.WebApp?.HapticFeedback) {
                const feedback = window.Telegram.WebApp.HapticFeedback;
                switch (type) {
                    case 'light': feedback.impactOccurred('light'); break;
                    case 'medium': feedback.impactOccurred('medium'); break;
                    case 'heavy': feedback.impactOccurred('heavy'); break;
                    case 'success': feedback.notificationOccurred('success'); break;
                    case 'warning': feedback.notificationOccurred('warning'); break;
                    case 'error': feedback.notificationOccurred('error'); break;
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ haptic feedback
        }
    }

    initModularNavigation() {
        if (window.MishuraApp?.components?.navigation) {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
            window.MishuraApp.components.navigation.init();
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í ===

    initFeedbackSystem() {
        this.feedbackSystem = {
            cooldownDays: 10,
            minCharacters: 150,
            maxCharacters: 1000,
            isShowing: false,
            currentConsultationId: null,
            selectedRating: null
        };
        
        console.log('üìù –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    async checkAndShowFeedbackPrompt(consultationId) {
        if (this.feedbackSystem.isShowing) return;
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', consultationId);
        
        try {
            const userId = this.getUserId();
            const response = await fetch(`${API_BASE_URL}/api/v1/feedback/can-prompt/${userId}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.can_show_prompt) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1-3 –º–∏–Ω—É—Ç—ã
                const delay = Math.random() * 120000 + 60000; // 1-3 –º–∏–Ω—É—Ç—ã
                
                console.log(`‚è∞ –§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —á–µ—Ä–µ–∑ ${Math.round(delay/1000)} —Å–µ–∫—É–Ω–¥`);
                
                setTimeout(() => {
                    this.showFeedbackModal(consultationId);
                }, delay);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ —Ñ–æ—Ä–º—É
                await this.logFeedbackPromptAction(consultationId, 'shown');
            } else {
                console.log('‚ùå –§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ (–∫—É–ª–¥–∞—É–Ω)');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–∞:', error);
        }
    }

    showFeedbackModal(consultationId) {
        if (this.feedbackSystem.isShowing) return;
        
        this.feedbackSystem.isShowing = true;
        this.feedbackSystem.currentConsultationId = consultationId;
        this.feedbackSystem.selectedRating = null;
        
        console.log('üìù –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∑—ã–≤–∞');
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤
        document.querySelectorAll('.feedback-modal-overlay').forEach(el => el.remove());
        
        const modal = document.createElement('div');
        modal.className = 'feedback-modal-overlay';
        modal.innerHTML = this.getFeedbackModalHTML();
        
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.classList.add('active');
        }, 100);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.setupFeedbackModalHandlers(modal);
        
        this.triggerHapticFeedback('light');
    }

    getFeedbackModalHTML() {
        return `
            <div class="feedback-modal-content">
                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="feedback-header">
                    <div class="feedback-icon">üí≠</div>
                    <h3 class="feedback-title">–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ!</h3>
                    <p class="feedback-description">
                        <strong class="feedback-highlight">–ó–∞ –æ—Ç–∑—ã–≤ 150+ —Å–∏–º–≤–æ–ª–æ–≤ = +10 STcoin</strong>
                    </p>
                </div>
                
                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ -->
                <div class="rating-section">
                    <div class="rating-label">–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:</div>
                    <div class="rating-buttons">
                        <button class="rating-btn" data-rating="positive">
                            <span class="rating-icon">üëç</span>
                            <span class="rating-text">–û—Ç–ª–∏—á–Ω–æ</span>
                        </button>
                        <button class="rating-btn" data-rating="negative">
                            <span class="rating-icon">üëé</span>
                            <span class="rating-text">–ü–ª–æ—Ö–æ</span>
                        </button>
                    </div>
                </div>
                
                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ -->
                <div class="feedback-form">
                    <textarea 
                        id="feedback-textarea" 
                        class="feedback-textarea"
                        placeholder="–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
                        maxlength="1000"
                    ></textarea>
                    <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                    <div class="feedback-meta">
                        <span id="feedback-char-count" class="char-count">0 —Å–∏–º–≤–æ–ª–æ–≤</span>
                        <span class="reward-hint">–ú–∏–Ω. 150 = –±–æ–Ω—É—Å</span>
                    </div>
                </div>
                
                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ -->
                <div class="feedback-actions">
                    <button id="feedback-skip" class="btn-feedback btn-ghost">–ü–æ–∑–∂–µ</button>
                    <button id="feedback-submit" class="btn-feedback btn-primary" disabled>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
        `;
    }

    setupFeedbackModalHandlers(modal) {
        const textarea = modal.querySelector('#feedback-textarea');
        const charCount = modal.querySelector('#feedback-char-count');
        const submitBtn = modal.querySelector('#feedback-submit');
        const skipBtn = modal.querySelector('#feedback-skip');
        const ratingBtns = modal.querySelectorAll('.rating-btn');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        ratingBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                ratingBtns.forEach(b => {
                    b.classList.remove('selected', 'positive', 'negative');
                });
                
                // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
                const rating = btn.dataset.rating;
                btn.classList.add('selected', rating);
                
                this.feedbackSystem.selectedRating = rating;
                this.updateFeedbackSubmitButton(textarea, submitBtn);
                
                console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥:', rating);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        textarea.addEventListener('input', () => {
            const length = textarea.value.length;
            charCount.textContent = `${length} —Å–∏–º–≤–æ–ª–æ–≤`;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫–∞
            if (length >= this.feedbackSystem.minCharacters) {
                charCount.classList.add('valid');
                charCount.classList.remove('warning');
                charCount.style.color = '#4CAF50';
                charCount.style.fontWeight = '700';
            } else if (length >= 100) {
                charCount.classList.add('warning');
                charCount.classList.remove('valid');
                charCount.style.color = '#ff9800';
                charCount.style.fontWeight = '600';
            } else {
                charCount.classList.remove('valid', 'warning');
                charCount.style.color = '#ffffff';
                charCount.style.fontWeight = '600';
            }
            
            this.updateFeedbackSubmitButton(textarea, submitBtn);
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitBtn.addEventListener('click', () => {
            this.submitFeedback(textarea.value);
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        skipBtn.addEventListener('click', () => {
            this.closeFeedbackModal('dismissed', 'user_skipped');
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeFeedbackModal('dismissed', 'clicked_outside');
            }
        });
    }

    updateFeedbackSubmitButton(textarea, submitBtn) {
        const length = textarea.value.length;
        const hasRating = this.feedbackSystem.selectedRating !== null;
        const hasEnoughText = length >= this.feedbackSystem.minCharacters;
        
        // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ò —Ç–µ–∫—Å—Ç >= 150 —Å–∏–º–≤–æ–ª–æ–≤
        const canSubmit = hasRating && hasEnoughText;
        submitBtn.disabled = !canSubmit;
    }

    async submitFeedback(feedbackText) {
        const trimmedText = feedbackText.trim();
        
        if (!this.feedbackSystem.selectedRating) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üëç –∏–ª–∏ üëé', 'warning');
            return;
        }
        
        if (trimmedText.length < this.feedbackSystem.minCharacters) {
            this.showNotification('–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!', 'warning');
            return;
        }
        
        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞...');
            
            const submitBtn = document.querySelector('#feedback-submit');
            submitBtn.disabled = true;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
            
            const userId = this.getUserId();
            const response = await fetch(`${API_BASE_URL}/api/v1/feedback/submit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: userId,
                    feedback_text: trimmedText,
                    feedback_rating: this.feedbackSystem.selectedRating,
                    consultation_id: this.feedbackSystem.currentConsultationId
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));
                throw new Error(errorData.detail || `HTTP ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.bonus_awarded) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                await this.forceBalanceUpdate();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const ratingText = this.feedbackSystem.selectedRating === 'positive' ? '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é' : '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é';
                this.showNotification(
                    `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ ${ratingText} –æ—Ü–µ–Ω–∫—É –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!`, 
                    'success', 
                    6000
                );
                
                this.animateBalanceChange();
            } else {
                this.showNotification('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', 'success');
            }
            
            this.closeFeedbackModal('completed');
            this.triggerHapticFeedback('success');
            
            console.log('‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
            
            const submitBtn = document.querySelector('#feedback-submit');
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
            }
            
            let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞';
            if (error.message.includes('—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')) {
                errorMessage = '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!';
            } else if (error.message.includes('—Å–ø–∞–º')) {
                errorMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤';
            } else if (error.message.includes('—Ä–µ–π—Ç–∏–Ω–≥')) {
                errorMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é';
            }
            
            this.showNotification(errorMessage, 'error');
            this.triggerHapticFeedback('error');
        }
    }

    async closeFeedbackModal(action = 'dismissed', reason = null) {
        const modal = document.querySelector('.feedback-modal-overlay');
        if (!modal) return;
        
        this.feedbackSystem.isShowing = false;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if (action !== 'completed') {
            await this.logFeedbackPromptAction(
                this.feedbackSystem.currentConsultationId || 0, 
                action, 
                reason
            );
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        modal.classList.remove('active');
        setTimeout(() => {
            modal.remove();
        }, 300);
        
        this.feedbackSystem.currentConsultationId = null;
        this.feedbackSystem.selectedRating = null;
    }

    async logFeedbackPromptAction(consultationId, action, dismissalReason = null) {
        try {
            const userId = this.getUserId();
            
            await fetch(`${API_BASE_URL}/api/v1/feedback/prompt-action`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: userId,
                    consultation_id: consultationId,
                    action: action,
                    dismissal_reason: dismissalReason
                })
            });
            
            console.log(`üìä –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–æ–π –æ—Ç–∑—ã–≤–∞: ${action}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–æ—Ä–º–æ–π:', error);
        }
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML onclick)
window.buyPlan = function(planId) {
    if (window.mishuraApp) {
        window.mishuraApp.initiatePayment(planId);
    } else {
        console.error('‚ùå MishuraApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (!window.mishuraApp) {
    console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ò–®–£–†–ê App v2.6.1...');
    window.mishuraApp = new MishuraApp();
}

// üßπ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏)
function clearCorruptedCache() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞...');
    localStorage.removeItem('mishura_user_data');
    if (window.mishuraApp) {
        window.mishuraApp.initializeUserData();
        console.log('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
    if (window.userService) {
        window.userService.syncBalance();
        console.log('üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}
