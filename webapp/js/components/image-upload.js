/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-upload.js)
–í–ï–†–°–ò–Ø: 1.0.6 (–í–ò–î–ò–ú–´–ï –ö–ù–û–ü–ö–ò –ó–ê–ì–†–£–ó–ö–ò)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-29

–†–ï–®–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º—ã–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ —Å–∫—Ä—ã—Ç—ã—Ö input'–æ–≤
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.components = window.MishuraApp.components || {};

window.MishuraApp.components.imageUpload = (function() {
    'use strict';
    
    let logger, uiHelpers;
    let isImageUploadInitialized = false;
    let currentMode = 'single';
    let uploadedImages = { single: null, compare: [null, null, null, null] };
    let eventListenersAttached = false;
    
    function init() {
        if (isImageUploadInitialized) {
            return;
        }

        logger = window.MishuraApp.utils.logger || createFallbackLogger();
        uiHelpers = window.MishuraApp.utils.uiHelpers;

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (v1.0.6 - Visible Buttons)");
        
        setupEventListeners();
        
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        setTimeout(() => {
            initializeUploadHandlers();
        }, 300);
        
        isImageUploadInitialized = true;
        logger.info("–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    function createFallbackLogger() {
        return {
            debug: (...args) => console.debug("ImageUpload:", ...args),
            info: (...args) => console.info("ImageUpload:", ...args),
            warn: (...args) => console.warn("ImageUpload:", ...args),
            error: (...args) => console.error("ImageUpload:", ...args)
        };
    }
    
    function setupEventListeners() {
        if (eventListenersAttached) return;
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        document.addEventListener('modeChanged', handleModeChange);
        
        // –°–ª—É—à–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('modalOpened', (e) => {
            logger.debug(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ: ${e.detail.modalId}`);
            if (e.detail.modalId === 'consultation-overlay' || e.detail.modalId === 'compare-overlay') {
                setTimeout(() => {
                    initializeUploadHandlers();
                }, 400);
            }
        });
        
        eventListenersAttached = true;
        logger.debug("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }
    
    function handleModeChange(e) {
        currentMode = e.detail.mode;
        logger.debug(`–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞: ${currentMode}`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        if (currentMode === 'single') {
            resetCompareMode();
        } else if (currentMode === 'compare') {
            resetSingleMode();
        }
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setTimeout(() => {
            initializeUploadHandlers();
        }, 200);
    }
    
    function initializeUploadHandlers() {
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º single —Ä–µ–∂–∏–º
        initSingleMode();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º compare —Ä–µ–∂–∏–º  
        initCompareMode();
    }
    
    function initSingleMode() {
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è single —Ä–µ–∂–∏–º–∞");
        
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID
        const uploadArea = document.querySelector('#single-upload-area') || document.querySelector('#single-preview');
        if (!uploadArea) {
            logger.warn("Single —Ä–µ–∂–∏–º: –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        createVisibleSingleButton(uploadArea);
        setupSingleDeleteButton();
    }
    
    function createVisibleSingleButton(uploadArea) {
        // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        uploadArea.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª–æ–≤—ã–π input
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'file';
        hiddenInput.accept = 'image/*';
        hiddenInput.id = 'single-hidden-input';
        hiddenInput.style.display = 'none';
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        const uploadButton = document.createElement('div');
        uploadButton.className = 'visible-upload-button';
        uploadButton.innerHTML = `
            <div class="upload-icon" style="font-size: 48px; margin-bottom: 16px; color: #d4af37;">üì∑</div>
            <div class="upload-title" style="font-size: 18px; font-weight: bold; color: #d4af37; margin-bottom: 8px;">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
            </div>
            <div class="upload-subtitle" style="font-size: 14px; color: #888; margin-bottom: 16px;">
                JPG, PNG, WEBP –¥–æ 10–ú–ë
            </div>
            <div class="upload-btn" style="
                background: linear-gradient(135deg, #d4af37, #f4d03f);
                color: #000;
                padding: 12px 24px;
                border-radius: 25px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                display: inline-block;
                box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
            ">
                üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
            </div>
        `;
        
        uploadButton.style.cssText = `
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 40px 20px;
            border: 2px dashed #d4af37;
            border-radius: 15px;
            background: rgba(212, 175, 55, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 200px;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
            -webkit-user-select: none;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
        uploadButton.addEventListener('mouseenter', () => {
            uploadButton.style.background = 'rgba(212, 175, 55, 0.1)';
            uploadButton.style.transform = 'scale(1.02)';
        });
        
        uploadButton.addEventListener('mouseleave', () => {
            uploadButton.style.background = 'rgba(212, 175, 55, 0.05)';
            uploadButton.style.transform = 'scale(1)';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        uploadButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            logger.debug("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –≤–∏–¥–∏–º–æ–π –∫–Ω–æ–ø–∫–µ single –∑–∞–≥—Ä—É–∑–∫–∏");
            hiddenInput.click();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        hiddenInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            logger.debug(`Single —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω: ${file ? file.name : 'none'}`);
            
            if (!file) return;
            
            if (!isValidImageFile(file)) {
                e.target.value = '';
                return;
            }
            
            handleSingleImageUpload(file);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º touch-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        uploadButton.style.cssText += `
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
            -webkit-user-select: none;
        `;
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ touch-—Å–æ–±—ã—Ç–∏—è
        uploadButton.addEventListener('touchstart', (e) => {
            e.preventDefault();
            uploadButton.style.transform = 'scale(0.98)';
            uploadButton.style.background = 'rgba(212, 175, 55, 0.15)';
        }, { passive: false });
        
        uploadButton.addEventListener('touchend', (e) => {
            e.preventDefault();
            uploadButton.style.transform = 'scale(1)';
            uploadButton.style.background = 'rgba(212, 175, 55, 0.05)';
            hiddenInput.click();
        }, { passive: false });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        uploadArea.appendChild(hiddenInput);
        uploadArea.appendChild(uploadButton);
        
        // Drag & Drop
        setupDragAndDrop(uploadArea, (file) => {
            if (isValidImageFile(file)) {
                handleSingleImageUpload(file);
            }
        });
        
        logger.debug("‚úÖ –í–∏–¥–∏–º–∞—è –∫–Ω–æ–ø–∫–∞ single –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω–∞");
    }
    
    function initCompareMode() {
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è compare —Ä–µ–∂–∏–º–∞");
        
        const imageSlotsContainer = document.querySelector('#compare-mode .compare-slots');
        if (!imageSlotsContainer) {
            logger.warn('Compare —Ä–µ–∂–∏–º: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä .compare-slots –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (!imageSlotsContainer) {
            logger.warn("Compare —Ä–µ–∂–∏–º: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        const compareSlots = imageSlotsContainer.querySelectorAll('.compare-slot');
        if (!compareSlots || compareSlots.length === 0) {
            logger.warn('Compare —Ä–µ–∂–∏–º: —Å–ª–æ—Ç—ã .compare-slot –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        logger.debug(`Compare —Ä–µ–∂–∏–º: –Ω–∞–π–¥–µ–Ω–æ ${compareSlots.length} —Å–ª–æ—Ç–æ–≤`);

        compareSlots.forEach((slot, index) => {
            createVisibleCompareButton(slot, index);
        });
    }
    
    function createVisibleCompareButton(slot, slotIndex) {
        logger.debug(`–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        slot.setAttribute('data-slot', slotIndex);
        slot.style.position = 'relative';
        
        // –ï—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        if (slot.classList.contains('filled')) {
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
        slot.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª–æ–≤—ã–π input
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'file';
        hiddenInput.accept = 'image/*';
        hiddenInput.className = 'compare-hidden-input';
        hiddenInput.setAttribute('data-slot', slotIndex);
        hiddenInput.style.display = 'none';
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        const uploadButton = document.createElement('div');
        uploadButton.className = 'visible-compare-button';
        uploadButton.innerHTML = `
            <div class="upload-icon" style="font-size: 32px; margin-bottom: 12px; color: #d4af37;">üì∑</div>
            <div class="upload-title" style="font-size: 14px; font-weight: bold; color: #d4af37; margin-bottom: 8px;">
                –§–æ—Ç–æ ${slotIndex + 1}
            </div>
            <div class="upload-btn" style="
                background: linear-gradient(135deg, #d4af37, #f4d03f);
                color: #000;
                padding: 8px 16px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                display: inline-block;
                box-shadow: 0 2px 8px rgba(212, 175, 55, 0.3);
            ">
                üìÅ –í—ã–±—Ä–∞—Ç—å
            </div>
        `;
        
        uploadButton.style.cssText = `
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            width: 100%;
            height: 100%;
            border: 2px dashed #d4af37;
            border-radius: 10px;
            background: rgba(212, 175, 55, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 16px 8px;
            box-sizing: border-box;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
            -webkit-user-select: none;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
        uploadButton.addEventListener('mouseenter', () => {
            uploadButton.style.background = 'rgba(212, 175, 55, 0.1)';
            uploadButton.style.transform = 'scale(1.05)';
        });
        
        uploadButton.addEventListener('mouseleave', () => {
            uploadButton.style.background = 'rgba(212, 175, 55, 0.05)';
            uploadButton.style.transform = 'scale(1)';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        uploadButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            logger.debug(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –≤–∏–¥–∏–º–æ–π –∫–Ω–æ–ø–∫–µ —Å–ª–æ—Ç–∞ ${slotIndex}`);
            hiddenInput.click();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        hiddenInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            logger.debug(`Compare —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${file ? file.name : 'none'}`);
            
            if (file && isValidImageFile(file)) {
                handleCompareImageUpload(file, slotIndex);
            } else if (file) {
                e.target.value = '';
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
        slot.addEventListener('click', function(e) {
            if (e.target.classList.contains('delete-image') || e.target.closest('.delete-image')) {
                e.preventDefault();
                e.stopPropagation();
                logger.debug(`–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–ª–æ—Ç–∞ ${slotIndex}`);
                resetCompareSlot(slotIndex);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º touch-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        uploadButton.style.cssText += `
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
            -webkit-user-select: none;
        `;
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ touch-—Å–æ–±—ã—Ç–∏—è
        uploadButton.addEventListener('touchstart', (e) => {
            e.preventDefault();
            uploadButton.style.transform = 'scale(0.98)';
            uploadButton.style.background = 'rgba(212, 175, 55, 0.15)';
        }, { passive: false });
        
        uploadButton.addEventListener('touchend', (e) => {
            e.preventDefault();
            uploadButton.style.transform = 'scale(1)';
            uploadButton.style.background = 'rgba(212, 175, 55, 0.05)';
            hiddenInput.click();
        }, { passive: false });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        slot.appendChild(hiddenInput);
        slot.appendChild(uploadButton);
        
        // Drag & Drop
        setupDragAndDrop(slot, (file) => {
            if (!slot.classList.contains('filled') && isValidImageFile(file)) {
                handleCompareImageUpload(file, slotIndex);
            }
        });
        
        logger.debug(`‚úÖ –í–∏–¥–∏–º–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex} —Å–æ–∑–¥–∞–Ω–∞`);
    }
    
    function setupDragAndDrop(element, onFileDrop) {
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let touchStarted = false;
        
        // Desktop drag & drop
        element.addEventListener('dragover', function(e) {
            e.preventDefault();
            element.classList.add('dragover');
            element.style.background = 'rgba(212, 175, 55, 0.2)';
        });
        
        element.addEventListener('dragleave', function() {
            element.classList.remove('dragover');
            element.style.background = '';
        });
        
        element.addEventListener('drop', function(e) {
            e.preventDefault();
            element.classList.remove('dragover');
            element.style.background = '';
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                onFileDrop(files[0]);
            }
        });
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ touch
        element.addEventListener('touchstart', function(e) {
            touchStarted = true;
            element.classList.add('touch-active');
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
            if (e.target === element) {
                e.preventDefault();
            }
        }, { passive: false });
        
        element.addEventListener('touchend', function(e) {
            if (touchStarted) {
                touchStarted = false;
                element.classList.remove('touch-active');
                
                // –≠–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                if (e.target === element || element.contains(e.target)) {
                    const input = element.querySelector('input[type="file"]');
                    if (input) {
                        setTimeout(() => input.click(), 100);
                    }
                }
            }
        });
        
        element.addEventListener('touchcancel', function() {
            touchStarted = false;
            element.classList.remove('touch-active');
        });
    }
    
    // –î–û–ë–ê–í–ò–¢–¨: –°—Ç–∏–ª–∏ –¥–ª—è touch –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const touchStyles = document.createElement('style');
    touchStyles.textContent = `
        .touch-active {
            background: rgba(212, 175, 55, 0.15) !important;
            transform: scale(0.98) !important;
            transition: all 0.1s ease !important;
        }
        
        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ touch targets */
        @media (hover: none) {
            .upload-area, .image-slot, .btn {
                -webkit-tap-highlight-color: rgba(212, 175, 55, 0.2);
                touch-action: manipulation;
            }
        }
    `;
    document.head.appendChild(touchStyles);
    
    function setupSingleDeleteButton() {
        const deleteButton = document.querySelector('#single-preview-container .delete-image');
        
        if (deleteButton) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newDeleteButton = deleteButton.cloneNode(true);
            deleteButton.parentNode.replaceChild(newDeleteButton, deleteButton);
            
            newDeleteButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                logger.debug("–£–¥–∞–ª–µ–Ω–∏–µ single –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
                resetSingleMode();
            });
        }
    }
    
    function handleSingleImageUpload(file) {
        logger.debug('–û–±—Ä–∞–±–æ—Ç–∫–∞ single –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', file.name);
        
        uploadedImages.single = file;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            const previewContainer = document.querySelector('#single-preview-container') || document.querySelector('#single-preview');
            const previewImage = document.querySelector('#single-preview-image') || document.querySelector('#single-preview img');
            const uploadArea = document.querySelector('#single-upload-area') || document.querySelector('#single-preview');
            
            if (previewImage && previewContainer) {
                previewImage.src = e.target.result;
                previewContainer.classList.remove('hidden');
                previewContainer.style.display = 'block';
                previewImage.style.display = 'block';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                setTimeout(() => {
                    setupSingleDeleteButton();
                }, 100);
            }
            
            if (uploadArea) {
                uploadArea.classList.add('hidden');
                uploadArea.style.display = 'none';
            }
            
            showFormElements();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            document.dispatchEvent(new CustomEvent('singleImageUploaded', { 
                detail: { file: file } 
            }));
        };
        
        reader.onerror = function() {
            logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', file.name);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        };
        
        reader.readAsDataURL(file);
    }
    
    function handleCompareImageUpload(file, slotIndex) {
        logger.debug(`–û–±—Ä–∞–±–æ—Ç–∫–∞ compare –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}:`, file.name);
        
        uploadedImages.compare[slotIndex] = file;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            const slot = document.querySelector(`.compare-slot[data-slot="${slotIndex}"]`);
            if (!slot) {
                logger.error(`–°–ª–æ—Ç ${slotIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
            slot.innerHTML = '';
            slot.classList.add('filled');
            
            // –°–æ–∑–¥–∞–µ–º preview –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const previewImg = document.createElement('img');
            previewImg.className = 'preview-image';
            previewImg.src = e.target.result;
            previewImg.alt = `–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${slotIndex + 1}`;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            previewImg.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 8px;
                display: block;
                opacity: 1;
                z-index: 15;
                visibility: visible;
            `;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-image';
            deleteBtn.innerHTML = '‚úï';
            deleteBtn.setAttribute('aria-label', `–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${slotIndex + 1}`);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º scope
            deleteBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                resetCompareSlot(slotIndex);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
            slot.appendChild(previewImg);
            slot.appendChild(deleteBtn);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const filledCount = uploadedImages.compare.filter(img => img !== null).length;
            if (filledCount >= 2) {
                showFormElements();
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            document.dispatchEvent(new CustomEvent('compareImageUploaded', { 
                detail: { 
                    file: file, 
                    slot: slotIndex,
                    slotIndex: slotIndex,
                    fileName: file.name
                } 
            }));
        };
        
        reader.readAsDataURL(file);
    }
    
    function isValidImageFile(file) {
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        const maxSize = 10 * 1024 * 1024; // 10MB
        
        if (!file || !file.type) {
            showToast('–§–∞–π–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
            return false;
        }
        
        if (!validTypes.includes(file.type.toLowerCase())) {
            showToast('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG, PNG, WEBP —Ñ–æ—Ä–º–∞—Ç—ã');
            return false;
        }
        
        if (file.size > maxSize) {
            const sizeMB = (file.size / (1024*1024)).toFixed(1);
            showToast(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${sizeMB}–ú–ë). –ú–∞–∫—Å–∏–º—É–º 10–ú–ë`);
            return false;
        }
        
        return true;
    }
    
    function showFormElements() {
        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
        const selectors = [
            '#consultation-overlay .occasion-selector',
            '#consultation-overlay .preferences-input',
            '#consultation-overlay #submit-consultation',
            '#consultation-overlay .input-label',
            '#compare-overlay .occasion-selector',
            '#compare-overlay .preferences-input', 
            '#compare-overlay #submit-comparison',
            '#compare-overlay .input-label'
        ];
        
        selectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                if (element) {
                    element.classList.remove('hidden');
                    element.style.display = element.tagName === 'BUTTON' ? 'flex' : 'block';
                    if (element.tagName === 'BUTTON') {
                        element.disabled = false;
                        element.classList.remove('disabled');
                    }
                }
            });
        });
        
        // –ù–æ–≤–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É
        const form = document.getElementById('consultation-form');
        if (form) {
            form.classList.add('active');
            form.style.display = 'block';
        }
        const occasionInput = document.getElementById('occasion');
        if (occasionInput) {
            occasionInput.parentElement?.classList?.remove('hidden');
            occasionInput.style.display = 'block';
        }
        const preferencesInput = document.getElementById('preferences');
        if (preferencesInput) {
            preferencesInput.parentElement?.classList?.remove('hidden');
            preferencesInput.style.display = 'block';
        }
        const submitBtn = document.getElementById('form-submit');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.classList.remove('disabled');
            submitBtn.style.display = 'flex';
        }
        
        logger.debug("–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π)");
    }
    
    function hideFormElements() {
        const selectors = [
            '#consultation-overlay .occasion-selector',
            '#consultation-overlay .preferences-input',
            '#consultation-overlay #submit-consultation',
            '#consultation-overlay .input-label',
            '#compare-overlay .occasion-selector',
            '#compare-overlay .preferences-input',
            '#compare-overlay #submit-comparison', 
            '#compare-overlay .input-label'
        ];
        
        selectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                if (element) {
                    element.classList.add('hidden');
                    element.style.display = 'none';
                    if (element.tagName === 'BUTTON') {
                        element.disabled = true;
                        element.classList.add('disabled');
                    }
                }
            });
        });
        // –ù–æ–≤–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
        const form = document.getElementById('consultation-form');
        if (form) {
            form.classList.remove('active');
            form.style.display = 'none';
        }
        const submitBtn = document.getElementById('form-submit');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.classList.add('disabled');
            submitBtn.style.display = 'none';
        }
    }
    
    function resetSingleMode() {
        logger.debug('–°–±—Ä–æ—Å single —Ä–µ–∂–∏–º–∞');
        
        const previewContainer = document.querySelector('#single-preview-container');
        const previewImage = document.querySelector('#single-preview-image');
        const uploadArea = document.querySelector('#single-upload-area');
        
        if (previewContainer) {
            previewContainer.classList.add('hidden');
            previewContainer.style.display = 'none';
        }
        if (previewImage) {
            previewImage.src = '';
            previewImage.style.display = 'none';
        }
        if (uploadArea) {
            uploadArea.classList.remove('hidden');
            uploadArea.style.display = 'block';
        }
        
        uploadedImages.single = null;
        hideFormElements();
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        setTimeout(() => {
            initSingleMode();
        }, 100);
        
        document.dispatchEvent(new CustomEvent('singleImageRemoved'));
    }
    
    function resetCompareSlot(slotIndex) {
        logger.debug(`–°–±—Ä–æ—Å compare —Å–ª–æ—Ç–∞ ${slotIndex}`);
        
        const slot = document.querySelector(`.compare-slot[data-slot="${slotIndex}"]`);
        if (!slot) return;
        
        // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
        slot.innerHTML = '';
        slot.classList.remove('filled');
        uploadedImages.compare[slotIndex] = null;
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        createVisibleCompareButton(slot, slotIndex);
        
        const filledCount = uploadedImages.compare.filter(img => img !== null).length;
        if (filledCount < 2) {
            hideFormElements();
        }
        
        document.dispatchEvent(new CustomEvent('compareImageRemoved', { 
            detail: { 
                slot: slotIndex,
                slotIndex: slotIndex
            } 
        }));
    }
    
    function resetCompareMode() {
        logger.debug('–°–±—Ä–æ—Å compare —Ä–µ–∂–∏–º–∞');
        
        for (let i = 0; i < 4; i++) {
            resetCompareSlot(i);
        }
        
        hideFormElements();
        document.dispatchEvent(new CustomEvent('allCompareImagesRemoved'));
    }
    
    function showToast(msg) {
        if (uiHelpers && typeof uiHelpers.showToast === 'function') {
            uiHelpers.showToast(msg);
        } else {
            const toast = document.getElementById('toast');
            if (toast) {
                toast.textContent = msg;
                toast.classList.add('active');
                setTimeout(() => toast.classList.remove('active'), 3000);
            } else {
                console.log('Toast:', msg);
            }
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API
    return { 
        init, 
        resetSingleImageUpload: resetSingleMode,
        resetCompareImageUploads: resetCompareMode, 
        resetSlot: resetCompareSlot,
        getUploadedImages: () => uploadedImages,
        isInitialized: () => isImageUploadInitialized,
        reinitialize: initializeUploadHandlers
    };
})();