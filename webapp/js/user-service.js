// üîß –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –§–ê–ô–õ: webapp/js/user-service.js
// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

class UserService {
    constructor() {
        this.currentUserId = null;
        this.currentUserSource = null;
        this.fallbackUserId = 5930269100;
        this.userInfo = null;
        this.balanceCache = new Map();
        this.syncInProgress = false;
        
        console.log('üë§ UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã)
     */
    getCurrentUserId() {
        const fallbackId = this.fallbackUserId;
        const currentId = this.currentUserId;
        const matchesFallbackId = currentId !== null && currentId !== undefined
            && Number.parseInt(currentId, 10) === fallbackId;
        const isCurrentFallback = matchesFallbackId || this.currentUserSource === 'fallback';

        if (currentId && !isCurrentFallback) {
            return currentId;
        }

        if (isCurrentFallback && currentId) {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω fallback ID. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä...');
        }

        try {
            let userId = null;
            let source = 'unknown';

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            const telegramRawId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
            if (telegramRawId !== undefined && telegramRawId !== null) {
                const parsedTelegramId = Number.parseInt(telegramRawId, 10);
                if (!Number.isNaN(parsedTelegramId) && parsedTelegramId > 0) {
                    userId = parsedTelegramId;
                    source = 'telegram_webapp';
                }
            }

            // 2. URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (userId === null) {
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('user_id')) {
                    const urlUserId = Number.parseInt(urlParams.get('user_id'), 10);
                    if (!Number.isNaN(urlUserId) && urlUserId > 0) {
                        userId = urlUserId;
                        source = 'url_params';
                    }
                }
            }

            // 3. localStorage —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
            if (userId === null) {
                const stored = localStorage.getItem('current_user_session');
                if (stored) {
                    try {
                        const session = JSON.parse(stored);
                        if (this.isValidSession(session)) {
                            const storedId = Number.parseInt(session.user_id, 10);
                            if (!Number.isNaN(storedId) && storedId > 0) {
                                userId = storedId;
                                const storedSource = typeof session.source === 'string' ? session.source : 'stored_session';
                                if (storedId === fallbackId) {
                                    source = 'fallback';
                                } else {
                                    source = storedSource || 'stored_session';
                                }
                            }
                        }
                    } catch (error) {
                        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ localStorage');
                    }
                }
            }

            // 4. Fallback ID
            if (userId === null) {
                userId = fallbackId; // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π ID
                source = 'fallback';
                console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback user ID');
            }

            if (userId === fallbackId && source !== 'fallback') {
                source = 'fallback';
            }

            const previousId = this.currentUserId;
            const previousSource = this.currentUserSource;

            this.currentUserId = userId;
            this.currentUserSource = source;

            if (previousId !== userId || previousSource !== source) {
                this.saveUserSession(userId, source);
                console.log(`‚úÖ User ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${userId} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
            }

            return userId;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user ID:', error);
            const emergencyId = this.fallbackUserId;
            this.currentUserId = emergencyId;
            this.currentUserSource = 'fallback';
            return emergencyId;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    saveUserSession(userId, source) {
        const fallbackId = this.fallbackUserId;
        const normalizedSource = userId === fallbackId && source !== 'fallback'
            ? 'fallback'
            : source;

        this.currentUserSource = normalizedSource;
        try {
            const session = {
                user_id: userId,
                source: normalizedSource,
                timestamp: Date.now(),
                platform: this.getPlatformInfo(),
                telegram_info: this.getTelegramInfo()
            };

            localStorage.setItem('current_user_session', JSON.stringify(session));
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            localStorage.setItem('user_id', userId.toString());
            localStorage.setItem('telegram_user_id', userId.toString());
            
            console.log('üíæ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', session);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
     */
    isValidSession(session) {
        if (!session || !session.user_id || !session.timestamp) {
            return false;
        }

        // –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ 24 —á–∞—Å–∞
        const sessionAge = Date.now() - session.timestamp;
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        const parsedId = Number.parseInt(session.user_id, 10);

        return sessionAge < maxAge && !Number.isNaN(parsedId) && parsedId > 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     */
    getPlatformInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            screen: {
                width: screen.width,
                height: screen.height
            },
            viewport: {
                width: window.innerWidth,
                height: window.innerHeight
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Telegram
     */
    getTelegramInfo() {
        if (!window.Telegram?.WebApp) {
            return null;
        }

        const tg = window.Telegram.WebApp;
        return {
            platform: tg.platform,
            version: tg.version,
            colorScheme: tg.colorScheme,
            isExpanded: tg.isExpanded,
            user: tg.initDataUnsafe?.user || null
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async getBalance(forceUpdate = false) {
        const userId = this.getCurrentUserId();
        
        if (!forceUpdate && this.balanceCache.has(userId)) {
            const cached = this.balanceCache.get(userId);
            const cacheAge = Date.now() - cached.timestamp;
            
            // –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω 30 —Å–µ–∫—É–Ω–¥
            if (cacheAge < 30000) {
                console.log(`üíæ –ë–∞–ª–∞–Ω—Å –∏–∑ –∫—ç—à–∞: ${cached.balance} STcoin`);
                return cached.balance;
            }
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/v1/users/${userId}/balance?_t=${Date.now()}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            const balance = data.balance;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.balanceCache.set(userId, {
                balance: balance,
                timestamp: Date.now()
            });

            console.log(`üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balance} STcoin`);
            return balance;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.balanceCache.has(userId)) {
                const cached = this.balanceCache.get(userId);
                console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${cached.balance} STcoin`);
                return cached.balance;
            }
            
            return 0;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    async syncBalance() {
        if (this.syncInProgress) {
            console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return null;
        }

        this.syncInProgress = true;
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');

        try {
            const balance = await this.getBalance(true);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.notifyBalanceChange(balance);
            
            return balance;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
     */
    notifyBalanceChange(newBalance) {
        const userId = this.getCurrentUserId();
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const event = new CustomEvent('balanceChanged', {
            detail: {
                userId: userId,
                balance: newBalance,
                timestamp: Date.now()
            }
        });
        
        document.dispatchEvent(event);
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${newBalance} STcoin`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async getUserInfo() {
        if (this.userInfo) {
            return this.userInfo;
        }

        try {
            const userId = this.getCurrentUserId();
            const response = await fetch(`${API_BASE_URL}/api/v1/debug/user/${userId}`);
            
            if (response.ok) {
                this.userInfo = await response.json();
                console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:', this.userInfo);
                return this.userInfo;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        }

        return null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
     */
    reset() {
        this.currentUserId = null;
        this.currentUserSource = null;
        this.userInfo = null;
        this.balanceCache.clear();
        
        try {
            localStorage.removeItem('current_user_session');
            console.log('üóëÔ∏è UserService —Å–±—Ä–æ—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    async diagnose() {
        console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER SERVICE ===');
        
        const userId = this.getCurrentUserId();
        console.log(`üë§ –¢–µ–∫—É—â–∏–π User ID: ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const session = localStorage.getItem('current_user_session');
        console.log('üíæ –°–µ—Å—Å–∏—è –≤ localStorage:', session ? JSON.parse(session) : null);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        const telegramInfo = this.getTelegramInfo();
        console.log('üì± Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', telegramInfo);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        try {
            const balance = await this.getBalance(true);
            console.log(`üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance} STcoin`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        const platformInfo = this.getPlatformInfo();
        console.log('üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:', platformInfo);
        
        console.log('üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.userService = new UserService();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UserService;
}

console.log('‚úÖ UserService –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

// üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ë–ê–õ–ê–ù–°–ê
// –î–æ–±–∞–≤–ª–µ–Ω–æ Mishura AI

class BalanceManager {
    constructor() {
        this.userService = window.userService || new UserService();
        this.userId = null;
        this.currentBalance = 0;
        this.lastSyncTime = 0;
        this.syncInProgress = false;
        this.autoSyncInterval = null;
        this.init();
    }

    resolveUserId() {
        try {
            if (this.userService?.getCurrentUserId) {
                const resolvedId = this.userService.getCurrentUserId();
                const parsedId = Number.parseInt(resolvedId, 10);
                if (!Number.isNaN(parsedId) && parsedId > 0) {
                    return parsedId;
                }
            }
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user ID —á–µ—Ä–µ–∑ UserService:', error);
        }

        return null;
    }

    init() {
        this.userId = this.resolveUserId();

        if (!this.userId) {
            this.showSyncStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ Telegram –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.', 'error');
            return;
        }

        console.log(`üöÄ BalanceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.userId}`);

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.forceSyncWithServer();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.createSyncButton();
    }

    /**
     * üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async forceSyncWithServer() {
        if (this.syncInProgress) {
            console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }

        const resolvedId = this.resolveUserId();
        if (resolvedId) {
            this.userId = resolvedId;
        }

        if (!this.userId) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            this.showSyncStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ Telegram.', 'error');
            return;
        }

        this.syncInProgress = true;
        this.showSyncStatus('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');

        try {
            console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è ${this.userId}`);

            // 1. –û—á–∏—â–∞–µ–º –≤–µ—Å—å localStorage
            this.clearAllBalanceCache();

            // 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await fetch(`/api/v1/users/${this.userId}/balance/sync`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Force-Refresh': 'true'
                },
                body: JSON.stringify({
                    force_refresh: true,
                    clear_cache: true,
                    timestamp: Date.now()
                })
            });

            if (!response.ok) {
                throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
            }

            const data = await response.json();
            const serverBalance = data.balance;

            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –±–∞–ª–∞–Ω—Å: ${serverBalance} STcoin`);

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateBalanceEverywhere(serverBalance);

            if (this.userService?.notifyBalanceChange) {
                try {
                    this.userService.notifyBalanceChange(serverBalance);
                } catch (notifyError) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ —á–µ—Ä–µ–∑ UserService:', notifyError);
                }
            }

            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å –º–µ—Ç–∫–æ–π "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
            this.saveBalanceToCache(serverBalance, true);

            if (this.userService) {
                this.userService.currentUserId = this.userId;
                const fallbackId = this.userService?.fallbackUserId ?? 5930269100;
                const isFallbackUser = this.userId === fallbackId || this.userService.currentUserSource === 'fallback';

                if (!isFallbackUser) {
                    this.userService.currentUserSource = 'balance_manager';
                }

                if (this.userService.balanceCache) {
                    this.userService.balanceCache.set(this.userId, {
                        balance: serverBalance,
                        timestamp: Date.now()
                    });
                }
            }

            this.showSyncStatus(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${serverBalance} STcoin`, 'success');
            this.lastSyncTime = Date.now();

            return serverBalance;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.showSyncStatus(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            throw error;
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞
     */
    clearAllBalanceCache() {
        const keysToRemove = [
            'user_balance',
            'balance_timestamp',
            'last_balance_sync',
            'cached_balance',
            'balance_cache',
            'stcoin_balance',
            'mishura_balance'
        ];

        if (this.userId) {
            keysToRemove.push(`balance_${this.userId}`);
        }

        keysToRemove.forEach(key => {
            try {
                localStorage.removeItem(key);
            } catch (e) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${key}:`, e);
            }
        });

        if (this.userService?.balanceCache && this.userId) {
            this.userService.balanceCache.delete(this.userId);
        }

        console.log('üßπ –í–µ—Å—å –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –æ—á–∏—â–µ–Ω');
    }

    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ localStorage
     */
    saveBalanceToCache(balance, synced = false) {
        const cacheData = {
            userId: this.userId,
            balance: balance,
            timestamp: Date.now(),
            synced: synced,
            source: 'server',
            version: '2.0'
        };

        try {
            localStorage.setItem('user_balance', JSON.stringify(cacheData));
            localStorage.setItem('balance_timestamp', Date.now().toString());
            localStorage.setItem('last_balance_sync', Date.now().toString());
            if (this.userId) {
                localStorage.setItem(`balance_${this.userId}`, JSON.stringify(cacheData));
            }
            console.log(`üíæ –ë–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${balance} STcoin (synced: ${synced})`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', error);
        }
    }

    /**
     * üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–æ –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateBalanceEverywhere(balance) {
        this.currentBalance = balance;

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        const balanceSelectors = [
            '#balance-display',
            '.balance-amount',
            '.balance-value',
            '[data-balance]',
            '#user-balance',
            '.stcoin-balance',
            '.balance-text',
            '#balance-counter',
            '.current-balance'
        ];

        let updatedElements = 0;

        balanceSelectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                if (element) {
                    element.textContent = `${balance} STcoin`;
                    element.setAttribute('data-balance', balance);
                    if (this.userId) {
                        element.setAttribute('data-user-id', this.userId);
                    } else {
                        element.removeAttribute('data-user-id');
                    }

                    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    element.classList.add('balance-updated');
                    setTimeout(() => {
                        element.classList.remove('balance-updated');
                    }, 1500);
                    
                    updatedElements++;
                }
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if (window.userBalance !== undefined) {
            window.userBalance = balance;
        }
        if (window.balance !== undefined) {
            window.balance = balance;
        }
        if (window.currentBalance !== undefined) {
            window.currentBalance = balance;
        }

        console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º ${balance} STcoin`);

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        window.dispatchEvent(new CustomEvent('balanceUpdated', {
            detail: { balance, userId: this.userId }
        }));
    }

    /**
     * üì± –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    createSyncButton() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
        if (document.getElementById('force-sync-button')) {
            return;
        }

        const button = document.createElement('button');
        button.id = 'force-sync-button';
        button.innerHTML = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å';
        button.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: #2196F3;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            z-index: 10000;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        `;

        button.onclick = () => {
            this.forceSyncWithServer();
        };

        document.body.appendChild(button);
        console.log('üì± –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞');
    }

    /**
     * üì¢ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    showSyncStatus(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.sync-notification');
        existingNotifications.forEach(n => n.remove());

        const notification = document.createElement('div');
        notification.className = 'sync-notification';
        
        const colors = {
            info: '#2196F3',
            success: '#4CAF50',
            error: '#f44336'
        };

        notification.style.cssText = `
            position: fixed;
            top: 50px;
            right: 10px;
            background: ${colors[type] || colors.info};
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 10001;
            max-width: 300px;
            word-wrap: break-word;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideInFromRight 0.3s ease-out;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3-5 —Å–µ–∫—É–Ω–¥
        const hideDelay = type === 'error' ? 5000 : 3000;
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideOutToRight 0.3s ease-in';
                setTimeout(() => notification.remove(), 300);
            }
        }, hideDelay);
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
     */
    getCurrentBalance() {
        return this.currentBalance;
    }

    /**
     * ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
     */
    startAutoSync() {
        if (this.autoSyncInterval) {
            clearInterval(this.autoSyncInterval);
        }

        this.autoSyncInterval = setInterval(() => {
            if (!this.syncInProgress) {
                console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
                this.forceSyncWithServer();
            }
        }, 60000); // 60 —Å–µ–∫—É–Ω–¥

        console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)');
    }

    /**
     * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    stopAutoSync() {
        if (this.autoSyncInterval) {
            clearInterval(this.autoSyncInterval);
            this.autoSyncInterval = null;
            console.log('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }
}

// üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.balanceManager = new BalanceManager();

// üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ BalanceManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    window.balanceManager.startAutoSync();
});

// üì± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('visibilitychange', () => {
    if (!document.hidden && window.balanceManager) {
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        window.balanceManager.forceSyncWithServer();
    }
});

// üé® CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const syncStyles = document.createElement('style');
syncStyles.textContent = `
    .balance-updated {
        animation: balanceUpdatePulse 1.5s ease-in-out;
        font-weight: bold;
    }
    
    @keyframes balanceUpdatePulse {
        0% { transform: scale(1); color: inherit; }
        50% { transform: scale(1.1); color: #4CAF50; font-weight: bold; }
        100% { transform: scale(1); color: inherit; }
    }
    
    @keyframes slideInFromRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOutToRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    .sync-notification {
        transition: all 0.3s ease;
    }
`;
document.head.appendChild(syncStyles);

console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');