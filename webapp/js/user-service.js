// üîß –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –§–ê–ô–õ: webapp/js/user-service.js
// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

class UserService {
    constructor() {
        this.currentUserId = null;
        this.userInfo = null;
        this.balanceCache = new Map();
        this.syncInProgress = false;
        
        console.log('üë§ UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã)
     */
    getCurrentUserId() {
        if (this.currentUserId) {
            return this.currentUserId;
        }

        try {
            let userId = null;
            let source = 'unknown';

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                userId = parseInt(window.Telegram.WebApp.initDataUnsafe.user.id);
                source = 'telegram_webapp';
            }
            
            // 2. URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            else if (!userId) {
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('user_id')) {
                    const urlUserId = parseInt(urlParams.get('user_id'));
                    if (!isNaN(urlUserId)) {
                        userId = urlUserId;
                        source = 'url_params';
                    }
                }
            }
            
            // 3. localStorage —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
            else if (!userId) {
                const stored = localStorage.getItem('current_user_session');
                if (stored) {
                    try {
                        const session = JSON.parse(stored);
                        if (this.isValidSession(session)) {
                            userId = parseInt(session.user_id);
                            source = 'stored_session';
                        }
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ localStorage');
                    }
                }
            }
            
            // 4. Fallback ID
            if (!userId) {
                userId = 5930269100; // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π ID
                source = 'fallback';
                console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback user ID');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º
            this.currentUserId = userId;
            this.saveUserSession(userId, source);
            
            console.log(`‚úÖ User ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${userId} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
            return userId;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user ID:', error);
            const emergencyId = 5930269100;
            this.currentUserId = emergencyId;
            return emergencyId;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    saveUserSession(userId, source) {
        try {
            const session = {
                user_id: userId,
                source: source,
                timestamp: Date.now(),
                platform: this.getPlatformInfo(),
                telegram_info: this.getTelegramInfo()
            };

            localStorage.setItem('current_user_session', JSON.stringify(session));
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            localStorage.setItem('user_id', userId.toString());
            localStorage.setItem('telegram_user_id', userId.toString());
            
            console.log('üíæ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', session);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
     */
    isValidSession(session) {
        if (!session || !session.user_id || !session.timestamp) {
            return false;
        }

        // –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ 24 —á–∞—Å–∞
        const sessionAge = Date.now() - session.timestamp;
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        return sessionAge < maxAge && !isNaN(parseInt(session.user_id));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     */
    getPlatformInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            screen: {
                width: screen.width,
                height: screen.height
            },
            viewport: {
                width: window.innerWidth,
                height: window.innerHeight
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Telegram
     */
    getTelegramInfo() {
        if (!window.Telegram?.WebApp) {
            return null;
        }

        const tg = window.Telegram.WebApp;
        return {
            platform: tg.platform,
            version: tg.version,
            colorScheme: tg.colorScheme,
            isExpanded: tg.isExpanded,
            user: tg.initDataUnsafe?.user || null
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async getBalance(forceUpdate = false) {
        const userId = this.getCurrentUserId();
        
        if (!forceUpdate && this.balanceCache.has(userId)) {
            const cached = this.balanceCache.get(userId);
            const cacheAge = Date.now() - cached.timestamp;
            
            // –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω 30 —Å–µ–∫—É–Ω–¥
            if (cacheAge < 30000) {
                console.log(`üíæ –ë–∞–ª–∞–Ω—Å –∏–∑ –∫—ç—à–∞: ${cached.balance} STcoin`);
                return cached.balance;
            }
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/v1/users/${userId}/balance?_t=${Date.now()}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            const balance = data.balance;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.balanceCache.set(userId, {
                balance: balance,
                timestamp: Date.now()
            });

            console.log(`üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balance} STcoin`);
            return balance;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.balanceCache.has(userId)) {
                const cached = this.balanceCache.get(userId);
                console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${cached.balance} STcoin`);
                return cached.balance;
            }
            
            return 0;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    async syncBalance() {
        if (this.syncInProgress) {
            console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return null;
        }

        this.syncInProgress = true;
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');

        try {
            const balance = await this.getBalance(true);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.notifyBalanceChange(balance);
            
            return balance;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
     */
    notifyBalanceChange(newBalance) {
        const userId = this.getCurrentUserId();
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const event = new CustomEvent('balanceChanged', {
            detail: {
                userId: userId,
                balance: newBalance,
                timestamp: Date.now()
            }
        });
        
        document.dispatchEvent(event);
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${newBalance} STcoin`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async getUserInfo() {
        if (this.userInfo) {
            return this.userInfo;
        }

        try {
            const userId = this.getCurrentUserId();
            const response = await fetch(`${API_BASE_URL}/api/v1/debug/user/${userId}`);
            
            if (response.ok) {
                this.userInfo = await response.json();
                console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:', this.userInfo);
                return this.userInfo;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        }

        return null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
     */
    reset() {
        this.currentUserId = null;
        this.userInfo = null;
        this.balanceCache.clear();
        
        try {
            localStorage.removeItem('current_user_session');
            console.log('üóëÔ∏è UserService —Å–±—Ä–æ—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    async diagnose() {
        console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER SERVICE ===');
        
        const userId = this.getCurrentUserId();
        console.log(`üë§ –¢–µ–∫—É—â–∏–π User ID: ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const session = localStorage.getItem('current_user_session');
        console.log('üíæ –°–µ—Å—Å–∏—è –≤ localStorage:', session ? JSON.parse(session) : null);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
        const telegramInfo = this.getTelegramInfo();
        console.log('üì± Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', telegramInfo);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        try {
            const balance = await this.getBalance(true);
            console.log(`üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance} STcoin`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        const platformInfo = this.getPlatformInfo();
        console.log('üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:', platformInfo);
        
        console.log('üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.userService = new UserService();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UserService;
}

console.log('‚úÖ UserService –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');